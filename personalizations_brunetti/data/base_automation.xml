<?xml version='1.0' encoding='UTF-8'?>
<odoo>
  <record model="base.automation" id="personalizations_brunetti.base_automation_4">
    <field name="name">Completar información de la oportunidad desde la mensajería</field>
    <field name="sequence" eval="False"/>
    <field name="model_id" ref="mail.model_mail_message"/>
    <field name="state">code</field>
    <field name="binding_type">action</field>
    <field name="crud_model_id" ref="mail.model_mail_message"/>
    <field name="code">

def clean_msg(mensaje):
    try:
      mensaje = mensaje.replace('&lt;ul&gt;&lt;li&gt;', '')
      mensaje = mensaje.replace('&lt;/li&gt;&lt;/ul&gt;', '')
      mensaje = mensaje.replace('&lt;/li&gt;&lt;li&gt;', '\n')
      mensaje = mensaje.strip()
  
      mensaje = mensaje.replace('&lt;ul&gt;', '')
      mensaje = mensaje.replace('&lt;li&gt;', '')
      mensaje = mensaje.replace('&lt;/li&gt;', '')
      mensaje = mensaje.replace('&lt;/ul&gt;', '')
      mensaje = mensaje.replace('\t', '\n')
      mensaje = mensaje.replace('\r', '\n')
  
      mensaje = "\n".join([line.strip() for line in mensaje.splitlines() if not line.startswith("&lt;div") and not line.startswith("&lt;/div&gt;") and not line.startswith("&lt;img") and len(line)&gt;1])
  
      while mensaje and mensaje[0] == '\n':
        mensaje = mensaje[1:]
  
    except Exception as error:
        pass
  
    return mensaje

def extract_pattern_web(mensaje):
    """&lt;ul&gt;&lt;li&gt;Nombre: fernando bonis&lt;/li&gt;&lt;li&gt;Correo electr\xf3nico: sanomercado@hotmail.com&lt;/li&gt;&lt;li&gt;Tel\xe9fono: 1562964752&lt;/li&gt;&lt;li&gt;Empresa: 100%sano mercado&lt;/li&gt;&lt;li&gt;Producto: GÃndolas con Equipo Incorporado GO1300EI&lt;/li&gt;&lt;li&gt;Mensaje: buenos dias podrian informarme el precio de GÃ³ndolas con Equipo Incorporado GO1300EI. y si podeen medios de pagos y envios a buenos aires. gracias&lt;/li&gt;&lt;/ul&gt;\r\n
    """
    values = dict()
    name = str()
    email = str()
    phone = str()
    product = str()
    company = str()
    try:
        mensaje = clean_msg(mensaje)
        for line in mensaje.splitlines():
            if not line:
                continue
            if line.startswith("Nombre: ") and not name:
                name = line[8:]
                name = name.strip()
            elif line.startswith("Correo ") and not email:
                email = line[20:].strip()
            elif line.startswith("Teléfono: ") and not phone:
                phone = line[10:].strip()
            elif line.startswith("Empresa: ") and not company:
                company = line[9:].strip()
            elif line.startswith("Producto: ") and not product:
                product = line[10:].strip()
                product_part = product.split("&gt;")
                if len(product_part) &gt;= 3:
                    product_name = product_part[1].replace('&lt;/a', '')
                    product_url = product_part[0].replace('&lt;a href="', '')
                    product_url = product_url.replace('"', '')
                else:
                    product_name = product
                    product_url = False
            elif line.startswith("Mensaje:"):
                break
            mensaje = mensaje.replace(line, '').strip()
        mensaje = mensaje.replace("Mensaje:", '').strip()

        if product:
            base_message = 'Producto: ' + product_name
            if product_url:
              mensaje = base_message + ' \n(url: ' + product_url + ')\n\n' + mensaje

        values = {
            'contact_name': name,
            'email_from': email,
            'phone': phone,
            'partner_name': company,
            'description': mensaje,
        }
    except Exception as error:
        pass
    return values

active_model = env.context.get('active_model', False)
active_ids = env.context.get('active_ids', [])

if active_model == 'mail.message':
  messages = env[active_model].search([('id', 'in', active_ids)])
  lead_ids = [rec.res_id for rec in messages]
elif active_model == 'crm.lead':
  lead_ids = active_ids

leads = env['crm.lead'].search([('id', 'in', lead_ids)])
for lead in leads:
  # Procesar datos de correo
  ready = 'Los campos fueron actualizados desde el mensaje de correo'
  msg_ready = [msg.body for msg in lead.message_ids if ready in str(msg.body)]
  if not msg_ready:
      # raise Warning("mensajes %s" % str([item.read([]) for item in lead.message_ids]))
      for msg in lead.message_ids.filtered(lambda x: x.message_type == 'email'):
          mensaje = clean_msg(msg.body)
          values = dict()
          if msg.subject and mensaje.startswith("Nombre:"):
              values = extract_pattern_web(mensaje)
          if values:
              lead.write(values)
              print_vals = '&lt;ul&gt;' + ''.join([
                  '&lt;li&gt;&lt;b&gt;' + item + '&lt;/b&gt;: ' + str(values[item]) + '&lt;/li&gt;'
                  for item in values]) + '&lt;/ul&gt;'
              # raise Warning ("values %s" % print_vals)
              lead.message_post(ready + '&lt;br/&gt;' + print_vals)
</field>
    <field name="filter_domain">[('model', '=', 'crm.lead'), ('subject', '!=', False), ('message_type', '=', 'email')]</field>
    <field name="trigger">on_create</field>
  </record>
  <record model="base.automation" id="personalizations_brunetti.base_automation_7">
    <field name="name">completar con leyenda BH SR</field>
    <field name="model_id" ref="account.model_account_move"/>
    <field name="state">object_write</field>
    <field name="binding_type">action</field>
    <field name="filter_domain">["&amp;",["move_type","=","out_invoice"],["company_id","=",1]]</field>
    <field name="trigger">on_create_or_write</field>
  </record>
  <record model="base.automation" id="personalizations_brunetti.base_automation_8">
    <field name="name">PERSONALIZACIÓN: Agregar Adjuntos de Otros Documentos</field>
    <field name="model_id" ref="mail.model_mail_compose_message"/>
    <field name="state">code</field>
    <field name="binding_type">action</field>
    <field name="code">

def get_product_attachments(product):
  """ Buscar attachments asociados
  a un producto dado
  """
  attachments = env['ir.attachment'].search([
    ('res_model', '=', 'product.product'),
    ('res_id', '=', product.id)])
  return attachments

# Obtener modelo disparador (sale.order) y el id del documento
mod = env.context["default_model"]  # &lt;= "sale.order"
act_id = env.context["active_id"]   # &lt;= 1234

# Ejecutar sólo si el modelo es sale.order
# Modificar según corresponda
if mod == "sale.order":
  att_ids = record.attachment_ids.ids
  
  sale = env[mod].browse(act_id)

  for line in sale.order_line:
    att_ids.extend(get_product_attachments(line.product_id).ids)
  record.update({"attachment_ids": att_ids })



</field>
    <field name="on_change_field_ids" eval="[(4, ref('mail.field_mail_compose_message__template_id'),)]"/>
    <field name="trg_date_range_type">day</field>
    <field name="trigger">on_change</field>
  </record>
  <record model="base.automation" id="personalizations_brunetti.base_automation_9">
    <field name="name">Etiquetas en ventas</field>
    <field name="model_id" ref="delivery.model_sale_order"/>
    <field name="state">code</field>
    <field name="binding_type">action</field>
    <field name="code">

ids=record.opportunity_id.mapped('tag_ids').ids
#raise Warning (x)
if record.opportunity_id:
    record.write({'tag_ids':[(6,0, ids)]})

</field>
    <field name="trigger">on_create_or_write</field>
  </record>
  <record model="base.automation" id="personalizations_brunetti.base_automation_10">
    <field name="name">Etiqueta en facturas</field>
    <field name="model_id" ref="account.model_account_move"/>
    <field name="state">code</field>
    <field name="binding_type">action</field>
    <field name="code">

ids=record.sale_order_ids.mapped('tag_ids').ids
#raise Warning (x)
if record.sale_order_ids:
    record.write({'x_label':[(6,0, ids)]})

</field>
    <field name="trigger">on_create_or_write</field>
  </record>
  <record model="base.automation" id="personalizations_brunetti.base_automation_11">
    <field name="name">Agregar seguidores en ventas web</field>
    <field name="model_id" ref="delivery.model_sale_order"/>
    <field name="state">followers</field>
    <field name="binding_type">action</field>
    <field name="filter_domain">[["user_id","=",23]]</field>
    <field name="trigger">on_create</field>
  </record>
  <record model="base.automation" id="personalizations_brunetti.base_automation_12">
    <field name="name">Establecer fecha de cambio etapa</field>
    <field name="model_id" ref="crm.model_crm_lead"/>
    <field name="state">code</field>
    <field name="binding_type">action</field>
    <field name="code">
for rec in records:
  today = datetime.datetime.today()
  if env.context['old_values'] and env.context['old_values'][rec.id].get('stage_id') and rec.stage_id:
    rec.write({'x_date_change_stage': today})
  elif not env.context['old_values'] and rec.stage_id:
    rec.write({'x_date_change_stage': today})

</field>
    <field name="trigger">on_create_or_write</field>
  </record>

  <record model="base.automation" id="personalizations_brunetti.base_automation_activity_on_sale_order">
    <field name="name">Añadir actividad de OV a cancelar</field>
    <field name="model_id" ref="sale.model_sale_order"/>
    <field name="state">next_activity</field>
    <field name="activity_type_id" ref="personalizations_brunetti.sale_order_to_cancel"/>
    <field name="activity_date_deadline_range">3</field>
    <field name="activity_date_deadline_range_type">days</field>
    <field name="activity_user_type">generic</field>
    <field name="activity_user_field_name">user_id</field>
    <field name="binding_type">action</field>
    <field name="filter_pre_domain">[["state","!=","sale"]]</field>
    <field name="filter_domain">["&amp;",["state","=","sale"],["user_id.name","not ilike","Mercado Libre"]]</field>
    <field name="trigger">on_write</field>
    <field name="trigger_field_ids" eval="[(4,ref('sale.field_sale_order__state'))]"/>
  </record>
</odoo>

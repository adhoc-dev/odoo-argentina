<?xml version='1.0' encoding='UTF-8'?>
<odoo>
  <record model="ir.actions.server" id="personalizations_brunetti.ir_act_server_802">
    <field name="name">Corrección Manual: Completar información de la oportunidad desde la mensajería</field>
    <field name="model_id" ref="crm.model_crm_lead"/>
    <field name="state">code</field>
    <field name="binding_type">action</field>
    <field name="code"><![CDATA[# Available variables:
#  - env: Odoo Environment on which the action is triggered
#  - model: Odoo Model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - Warning: Warning Exception to use with raise
# To return an action, assign: action = {...}

def clean_msg(mensaje):
    try:
      mensaje = mensaje.replace('<ul><li>', '')
      mensaje = mensaje.replace('</li></ul>', '')
      mensaje = mensaje.replace('</li><li>', '\n')
      mensaje = mensaje.strip()
  
      mensaje = mensaje.replace('<ul>', '')
      mensaje = mensaje.replace('<li>', '')
      mensaje = mensaje.replace('</li>', '')
      mensaje = mensaje.replace('</ul>', '')
      mensaje = mensaje.replace('\t', '\n')
      mensaje = mensaje.replace('\r', '\n')
  
      mensaje = "\n".join([line.strip() for line in mensaje.splitlines() if not line.startswith("<div") and not line.startswith("</div>") and not line.startswith("<img") and len(line)>1])
  
      while mensaje and mensaje[0] == '\n':
        mensaje = mensaje[1:]
  
    except Exception as error:
        pass
  
    return mensaje

def extract_pattern_web(mensaje):
    """<ul><li>Nombre: fernando bonis</li><li>Correo electr\xf3nico: sanomercado@hotmail.com</li><li>Tel\xe9fono: 1562964752</li><li>Empresa: 100%sano mercado</li><li>Producto: GÃndolas con Equipo Incorporado GO1300EI</li><li>Mensaje: buenos dias podrian informarme el precio de GÃ³ndolas con Equipo Incorporado GO1300EI. y si podeen medios de pagos y envios a buenos aires. gracias</li></ul>\r\n
    """
    values = dict()
    name = str()
    email = str()
    phone = str()
    product = str()
    company = str()
    try:
        for line in mensaje.splitlines():
            if not line:
                continue
            if line.startswith("Nombre: ") and not name:
                name = line[8:]
                name = name.strip()
            elif line.startswith("Correo ") and not email:
                email = line[20:].strip()
            elif line.startswith("Teléfono: ") and not phone:
                phone = line[10:].strip()
            elif line.startswith("Empresa: ") and not company:
                company = line[9:].strip()
            elif line.startswith("Producto: ") and not product:
                product = line[10:].strip()
                product_part = product.split(">")
                if len(product_part) >= 3:
                    product_name = product_part[1].replace('</a', '')
                    product_url = product_part[0].replace('<a href="', '')
                    product_url = product_url.replace('"', '')
                else:
                    product_name = product
                    product_url = False
            elif line.startswith("Mensaje:"):
                break
            mensaje = mensaje.replace(line, '').strip()
        mensaje = mensaje.replace("Mensaje:", '').strip()

        if product:
            base_message = 'Producto: ' + product_name
            if product_url:
              mensaje = base_message + ' \n(url: ' + product_url + ')\n\n' + mensaje

        values = {
            'contact_name': name,
            'email_from': email,
            'phone': phone,
            'partner_name': company,
            'description': mensaje,
        }
    except Exception as error:
        pass
    return values

active_model = env.context.get('active_model', False)
active_ids = env.context.get('active_ids', [])

if active_model == 'mail.message':
  messages = env[active_model].search([('id', 'in', active_ids)])
  lead_ids = [rec.res_id for rec in messages]
elif active_model == 'crm.lead':
  lead_ids = active_ids

leads = env['crm.lead'].search([('id', 'in', lead_ids)])
for lead in leads:
  # Procesar datos de correo
  ready = 'Los campos fueron actualizados desde el mensaje de correo (Manualmente a las %s)' % (time.strftime('%Y-%m-%d %H:%M:%S'))
  msg_ready = [msg.body for msg in lead.message_ids if ready in str(msg.body)]
  if not msg_ready:
      # raise Warning("mensajes %s" % str([item.read([]) for item in lead.message_ids]))
      for msg in lead.message_ids.filtered(lambda x: x.message_type == 'email'):
          mensaje = clean_msg(msg.body)
          values = dict()
          if msg.subject and mensaje.startswith("Nombre:"):
              values = extract_pattern_web(mensaje)
          if values:
              lead.write(values)
              print_vals = '<ul>' + ''.join([
                  '<li><b>' + item + '</b>: ' + str(values[item]) + '</li>'
                  for item in values]) + '</ul>'
              # raise Warning ("values %s" % print_vals)
              lead.message_post(ready + '<br/>' + print_vals)
]]></field>
  </record>
  <record model="ir.actions.server" id="personalizations_brunetti.ir_act_server_827">
    <field name="name">Llevar notas internas a envío</field>
    <field name="model_id" ref="inter_company_rules.model_purchase_order"/>
    <field name="state">code</field>
    <field name="binding_type">action</field>
    <field name="code"><![CDATA[# Available variables:
#  - env: Odoo Environment on which the action is triggered
#  - model: Odoo Model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - Warning: Warning Exception to use with raise
# To return an action, assign: action = {...}

record.picking_ids.write({"note":records.internal_notes})


]]></field>
  </record>
  <record model="ir.actions.server" id="personalizations_brunetti.ir_act_server_837">
    <field name="name">Cambiar etapa</field>
    <field name="model_id" ref="crm.model_crm_lead"/>
    <field name="state">object_write</field>
    <field name="binding_type">action</field>
  </record>
</odoo>

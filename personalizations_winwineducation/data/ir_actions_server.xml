<?xml version='1.0' encoding='UTF-8'?>
<odoo>
  <record id="personalizations_winwineducation.ir_act_server_985_0a303800" model="ir.actions.server">
    <field name="name">Crear Alumno y Padres desde la Encuesta</field>
    <field ref="crm.model_crm_lead" name="model_id"/>
    <field name="state">code</field>
    <field ref="crm.model_crm_lead" name="binding_model_id"/>
    <field name="binding_type">action</field>
    <field name="code"><![CDATA[
def get_family_member(dni):
    return env['res.partner'].search([('partner_type','=','parent'),('dni', '=', dni),('parent_id', '!=', False)], limit=1)

def get_student(dni):
    return env['res.partner'].search([('partner_type','=','student'),('dni', '=', dni),('parent_id', '!=', False)], limit=1)

def obtener_respuesta(id_pregunta):
  response_line = env['survey.user_input_line'].search([('user_input_id', '=', rec.response_id.id), ('question_id', '=', id_pregunta)], limit=1)
  if not response_line or response_line.skipped:
    return ''
  answer_field = {
    'text': 'value_text',
    'date': 'value_date',
    'free_text': 'value_free_text',
    'suggestion': 'value_suggested',
    'number': 'value_number',
  }.get(response_line.answer_type)
  if answer_field == 'value_suggested':
    return response_line.value_suggested.display_name
  else:
    return response_line[answer_field]

def get_etiquetas():
  nivel = "Primaria" if obtener_respuesta(226) or obtener_respuesta(551) else 'Secundaria'
  return env['res.partner.category'].search([('name','=',[nivel,obtener_respuesta(227 or obtener_respuesta(552))+'°'])]).ids



def crear_familia(website ,apellido):
  #Dejo la variable apellido por si en un futuro se pone el apellido de la madre solamente en lugar del apellido del padre
  familia = env['res.partner'].create({
    'name': 'Flia. %s' % (apellido) ,
    'company_id': rec.team_id.company_id.id,
    'is_company': True,
    'street': direccion_familia,
    'city': obtener_respuesta(310) or obtener_respuesta(582),
    'email': ','.join([(obtener_respuesta(511) or obtener_respuesta(567)), (obtener_respuesta(513) or obtener_respuesta(642))]),
    'state_id': env['res.country.state'].search([('name','=', obtener_respuesta(308) or obtener_respuesta(580))], limit=1).id,
    'zip': int(obtener_respuesta(311) or obtener_respuesta(583)) if obtener_respuesta(311) or obtener_respuesta(583) else False ,
    'country_id': 10,
    'phone': obtener_respuesta(312) or obtener_respuesta(584),
    'mobile': obtener_respuesta(313) or obtener_respuesta(585),
    'website_id': website.id,
    'l10n_ar_afip_responsibility_type_id': env['l10n_ar.afip.responsibility.type'].search([('name','=','Consumidor Final')]).id,
    'l10n_latam_identification_type_id': env['l10n_latam.identification.type'].search([('name','=','DNI')]).id,
    'vat': str(int(obtener_respuesta(377) or obtener_respuesta(387) or obtener_respuesta(564) or obtener_respuesta(639)))
    })
  return familia

def cargar_autorizaciones(alumno):
  #Autorizaciones
  env['x_res.partner.emergency.contact'].create({  #Este si es obligatorio
    'x_contact_name': obtener_respuesta(340) or obtener_respuesta(593) +" "+ obtener_respuesta(339) or obtener_respuesta(592),
    'x_contact_dni': int(obtener_respuesta(341) or obtener_respuesta(594)) if obtener_respuesta(341) or obtener_respuesta(594) else False,
    'x_res_partner_id': alumno,
    'x_type':'a',
    'x_observations':obtener_respuesta(342) or obtener_respuesta(595),
  })
  if obtener_respuesta(343) and obtener_respuesta(344) or obtener_respuesta(596) and obtener_respuesta(597):
    env['x_res.partner.emergency.contact'].create({  #Como no es obligatorio le pongo if para que no cargue vacio
      'x_contact_name': obtener_respuesta(344) or obtener_respuesta(597) +" "+ obtener_respuesta(343) or obtener_respuesta(596),
      'x_contact_dni': int(obtener_respuesta(345) or obtener_respuesta(598)) if obtener_respuesta(345) or obtener_respuesta(598) else False,
      'x_res_partner_id': alumno,
      'x_type':'a',
      'x_observations':obtener_respuesta(346) or obtener_respuesta(599),
    })
  #Restricción
  if obtener_respuesta(373) and obtener_respuesta(374) or obtener_respuesta(643) and obtener_respuesta(644):
    env['x_res.partner.emergency.contact'].create({
      'x_contact_name': obtener_respuesta(374) or obtener_respuesta(644) +" "+ obtener_respuesta(373) or obtener_respuesta(643),
      'x_contact_dni': int(obtener_respuesta(375) or obtener_respuesta(645)) if obtener_respuesta(375) or obtener_respuesta(645) else False,
      'x_res_partner_id': alumno,
      'x_type':'r',
      'x_observations':obtener_respuesta(376) or obtener_respuesta(646),
    })
  #Contacto de Emergencia
  if obtener_respuesta(367) or obtener_respuesta(625) and (obtener_respuesta(368) and obtener_respuesta(369) or obtener_respuesta(626) and obtener_respuesta(627)) or obtener_respuesta(370) or obtener_respuesta(628):
    env['x_res.partner.emergency.contact'].create({
      'x_contact_name': (obtener_respuesta(368) or obtener_respuesta(626)) +" "+ (obtener_respuesta(369) or obtener_respuesta(627)) if obtener_respuesta(367) or obtener_respuesta(625) == 'Persona' else obtener_respuesta(370) or obtener_respuesta(628),
      'x_res_partner_id': alumno,
      'x_type':'ce' if obtener_respuesta(367) or obtener_respuesta(625) == 'Persona' else 'ie',
      'x_observations': 'Dirección: '+ (obtener_respuesta(371) or obtener_respuesta(629)) +'\nTeléfono: '+ (obtener_respuesta(372) or obtener_respuesta(630)),
    })

def crear_alumno(familia):
  etiquetas = get_etiquetas()
  alumno = env['res.partner'].create({
    'name': apellido_alumno +', '+ (obtener_respuesta(298) or obtener_respuesta(570)),
    'is_company': False,
    'company_id': rec.team_id.company_id.id,
    'parent_id': familia.id,
    'partner_type': 'student',
    'dni': int(obtener_respuesta(296) or obtener_respuesta(568)),
    'sex': 'M' if (obtener_respuesta(299) or obtener_respuesta(571)) == 'Masculino' else 'F',
    'birthdate': obtener_respuesta(300) or obtener_respuesta(572) or False,
    'email': obtener_respuesta(511) or obtener_respuesta(567),
    'medical_insurance': obtener_respuesta(391) or obtener_respuesta(614) +" - " + (obtener_respuesta(350) or obtener_respuesta(601)) if (obtener_respuesta(349) or obtener_respuesta(600)) == 'Sí' else '',
    'category_id': [(6,0,etiquetas)],
    'website_id': familia.website_id.id,
    'como_conocio_colegio': ([k for k,v in dict(rec.partner_id._fields['como_conocio_colegio'].selection).items() if v == obtener_respuesta(363) or obtener_respuesta(615)])[0] if ([k for k,v in dict(rec.partner_id._fields['como_conocio_colegio'].selection).items() if v == obtener_respuesta(363) or obtener_respuesta(615)]) else False,
    'modalidad_pago': ([k for k,v in dict(rec.partner_id._fields['modalidad_pago'].selection).items() if v == obtener_respuesta(364) or obtener_respuesta(616)])[0] if ([k for k,v in dict(rec.partner_id._fields['modalidad_pago'].selection).items() if v == obtener_respuesta(364) or obtener_respuesta(616)]) else False,
    'accede_descuento': True if obtener_respuesta(366) or obtener_respuesta(617) else False,
    })
  autorizaciones = cargar_autorizaciones(alumno.id) #las creo desde el método y le agrego el partner id  autorizaciones = cargar_autorizaciones(alumno.id) #las creo desde el método y le agrego el partner id

def crear_padres(familia):
  #Esto me gustaría validarlo con ellos pero si seguimos la idea de padres separados que forman una familia nueva, se debería crear un partner nuevo.
  #Capaz q se puede, pero creo que un partner de tipo individual no puede pertenecer a 2 partners tipo compañia
  #Padre
  env['res.partner'].create({
    'name': (obtener_respuesta(233) or obtener_respuesta(556)).upper() +', '+ (obtener_respuesta(323) or obtener_respuesta(558)),
    'is_company': False,
    'company_id': rec.team_id.company_id.id,
    'parent_id': familia.id,
    'partner_type': 'parent',
    'tipo_relacion': ([k for k,v in dict(rec.partner_id._fields['tipo_relacion'].selection).items() if v == obtener_respuesta(776) or obtener_respuesta(776)])[0] if ([k for k,v in dict(rec.partner_id._fields['tipo_relacion'].selection).items() if v == obtener_respuesta(776) or obtener_respuesta(776)]) else False,
    'email': obtener_respuesta(511) or obtener_respuesta(567),
    'birthdate': obtener_respuesta(389) or obtener_respuesta(565) or False,
    'dni': int(obtener_respuesta(377) or obtener_respuesta(564)),
    'function': obtener_respuesta(327) or obtener_respuesta(562),
    'sex': 'M',
    'website_id': familia.website_id.id

    })
  #Madre
  env['res.partner'].create({
    'name': (obtener_respuesta(378) or obtener_respuesta(631)).upper() +', '+ (obtener_respuesta(379) or obtener_respuesta(632)),
    'is_company': False,
    'company_id': rec.team_id.company_id.id,
    'parent_id': familia.id,
    'partner_type': 'parent',
    'tipo_relacion': ([k for k,v in dict(rec.partner_id._fields['tipo_relacion'].selection).items() if v == obtener_respuesta(777) or obtener_respuesta(777)])[0] if ([k for k,v in dict(rec.partner_id._fields['tipo_relacion'].selection).items() if v == obtener_respuesta(777) or obtener_respuesta(777)]) else False,
    'email': obtener_respuesta(513) or obtener_respuesta(642),
    'birthdate': obtener_respuesta(390) or obtener_respuesta(640) or False,
    'email': obtener_respuesta(513) or obtener_respuesta(642),
    'dni': int(obtener_respuesta(387) or obtener_respuesta(639)),
    'function': obtener_respuesta(384) or obtener_respuesta(637),
    'sex': 'F',
    'website_id': familia.website_id.id
    })

##Inicio de la acción ##
#Aclaraciones: Tienen 2 encuestas creadas donde en una agregan 7mo de secundaria y por eso se agrega un or para completar 1 u otra
for rec in records:
  if rec.response_id.state == 'done':
  #Obtenemos alumno para ver si existe
    dni_alumno = int(obtener_respuesta(296) or obtener_respuesta(568))
    if get_student(dni_alumno):
      raise Warning('Ya existe un alumno con DNI %s' % dni_alumno)

    padre = get_family_member(int(obtener_respuesta(377) or obtener_respuesta(564)))
    madre = get_family_member(int(obtener_respuesta(387) or obtener_respuesta(639)))
    apellido_padre = (obtener_respuesta(233) or obtener_respuesta(556)).upper()
    apellido_madre = (obtener_respuesta(378) or obtener_respuesta(631)).upper()
    apellido_alumno = (obtener_respuesta(297) or obtener_respuesta(569)).upper()
    website = env['website'].search([('company_id','=',rec.company_id.id)],limit=1)
    #Acá verifico que el parent_id del padre y la madre sea diferente, en caso de ser igual pertenecen a la misma familia
    #Acá los parent_id son distintos o puede que incluso alguno o ambos no tenga un parent_id
    if padre.parent_id:
      familia = padre.parent_id

    #elif madre.parent_id and apellido_madre == apellido_alumno and padre.parent_id != madre.parent_id:
    #    familia = madre.parent_id 
    else: 
    #  apellido_padre = obtener_respuesta(233).upper()
    #  apellido_madre = obtener_respuesta(378).upper()
      direccion_familia= obtener_respuesta(303) or obtener_respuesta(575) + ' ' + str(int(obtener_respuesta(304) or obtener_respuesta(576))) + ' ' + obtener_respuesta(305) or obtener_respuesta(577) + obtener_respuesta(306) or obtener_respuesta(578)
      familia = crear_familia(website, apellido_alumno)
      crear_padres(familia)
  
    crear_alumno(familia)
    rec.response_id.update({'partner_id':familia.id}) #relaciono la encuesta con el alumno nuevo 
  else:
    raise Warning('No se completó la encuesta, luego de que la complete va a poder crear la famila del alumno')]]></field>
  </record>
  <record id="personalizations_winwineducation.ir_act_server_1005_2f03d1fe" model="ir.actions.server">
    <field name="name">Solicitudes - Vacantes Completas</field>
    <field ref="hr_recruitment.model_hr_applicant" name="model_id"/>
    <field name="state">code</field>
    <field ref="hr_recruitment.model_hr_applicant" name="binding_model_id"/>
    <field name="binding_type">action</field>
    <field name="code"><![CDATA[
for rec in records:
  rec.write({'stage_id':15})


]]></field>
  </record>
  <record id="personalizations_winwineducation.ir_act_server_1007_383ade14" model="ir.actions.server">
    <field name="name">Alumno - Actualizar Datos</field>
    <field ref="base.model_res_partner" name="model_id"/>
    <field name="state">code</field>
    <field ref="base.model_res_partner" name="binding_model_id"/>
    <field name="binding_type">action</field>
    <field name="code"><![CDATA[
for rec in records:
  survey = env['survey.survey'].browse(17)
  if rec.partner_type != 'student':
    raise Warning('Esta encuesta es solo para los alumnos!')

  #Busco si el alumno no tenía una encuesta ya sin completar, si tiene le vuelvo a mandar esa 
  survey_user_input = env['survey.user_input'].search([('partner_id', '=', rec.id), ('survey_id', '=', survey.id), ('state', '!=', 'done')], limit=1)

  if not survey_user_input:
    #Creo la encuesta
    survey_user_input = survey.with_context(default_input_type="link")._create_answer(partner=rec)

  url = survey_user_input._get_survey_url()
  values = {
    'model': 'res.partner',
    'res_id': rec.id,
    'subject': 'Actualización de los datos del alumno: %s' % (rec.name),
    'body': env.ref('survey.mail_template_user_input_invite', raise_if_not_found=False).body_html.replace("__URL__", url),
    'body_html':env.ref('survey.mail_template_user_input_invite', raise_if_not_found=False).body_html.replace("__URL__", url),
    'parent_id': None,
    'recipient_ids': [(6,0,rec.parent_id.child_ids.filtered(lambda x: x.partner_type == 'parent').ids)],
    'email_from': rec.company_id.email,
    'auto_delete': False,
  }
  env['mail.mail'].create(values).send()
]]></field>
  </record>
  <record id="personalizations_winwineducation.alumno_solicitud_datos_personales" model="ir.actions.server">
    <field name="name">Alumno - Solicitud Datos Personales</field>
    <field ref="base.model_res_partner" name="model_id"/>
    <field name="state">code</field>
    <field ref="base.model_res_partner" name="binding_model_id"/>
    <field name="binding_type">action</field>
    <field name="code"><![CDATA[
if 'students' in env.context and env.context['students']:
  records = env['res.partner'].browse(env.context['students'])

def get_email(alumno):
  nivel = 'primaria' if alumno.curso_actual.level_id.section_id.name == 'Primario' else 'secundaria'
  return "secretaria." + nivel + "@colegio" + alumno.company_id.name.lower() + ".edu.ar"

for rec in records:
  survey = env['survey.survey'].browse(23) if rec.company_id.state_id.name == 'Santa Fe' else env['survey.survey'].browse(22)
  if rec.partner_type != 'student':
    raise Warning('Esta encuesta es solo para los alumnos!')
  if not rec.curso_actual:
    raise Warning('El alumno no está incluido en ningún curso!')

  # Busco si el alumno no tenía una encuesta ya sin completar, si tiene le vuelvo a mandar esa
  survey_user_input = env['survey.user_input'].search([('partner_id', '=', rec.id), ('survey_id', '=', survey.id), ('state', '!=', 'done')], limit=1)
  if not survey_user_input:
    # Creo la encuesta
    survey_user_input = survey.with_context(default_input_type="link")._create_answer(partner=rec)

  url = survey_user_input._get_survey_url()
  fecha = (datetime.date.today() + dateutil.relativedelta.relativedelta(days=10)).strftime("%d/%m/%Y")
  values = {
    'model': 'res.partner',
    'res_id': rec.id,
    'subject': 'Colegio %s - Solicitud de actualización de datos personales del alumno %s' % (rec.company_id.name, rec.name),
    'body': env['mail.template'].browse(66).body_html.replace("__URL__", url).replace("_email_", get_email(rec)).replace("_nombre_colegio_", rec.company_id.name).replace("_fecha_", fecha),
    'body_html': env['mail.template'].browse(66).body_html.replace("__URL__", url).replace("_email_", get_email(rec)).replace("_nombre_colegio_", rec.company_id.name).replace("_fecha_", fecha),
    'parent_id': None,
    'recipient_ids': [(6,0,rec.parent_id.child_ids.filtered(lambda x: x.partner_type == 'parent').ids)],
    'email_from': rec.company_id.email,
    'auto_delete': False,
  }
  env['mail.mail'].create(values).send()
]]></field>
  </record>
  <record id="personalizations_winwineducation.alumno_seguimiento" model="ir.actions.server">
    <field name="name">Alumno - Seguimiento</field>
    <field ref="base.model_res_partner" name="model_id"/>
    <field name="state">code</field>
    <field ref="base.model_res_partner" name="binding_model_id"/>
    <field name="binding_type">action</field>
    <field name="code"><![CDATA[
def get_email(alumno):
  nivel = 'primaria' if alumno.curso_actual.level_id.section_id.name == 'Primario' else 'secundaria'
  return "secretaria." + nivel + "@colegio" + alumno.company_id.name.lower() + ".edu.ar"

for rec in records:
  survey = env['survey.survey'].browse(21)
  if rec.partner_type != 'student':
    raise Warning('Esta encuesta es solo para los alumnos!')
  if not rec.curso_actual:
    raise Warning('El alumno no está incluido en ningún curso!')

    #Creo la encuesta
  survey_user_input = survey.with_context(default_input_type="link")._create_answer(partner=rec)


  url = survey_user_input._get_survey_url()
  fecha = (datetime.date.today() + dateutil.relativedelta.relativedelta(days=10)).strftime("%d/%m/%Y")
  values = {
    'model': 'res.partner',
    'res_id': rec.id,
    'subject': 'Colegio %s - Seguimiento del alumno %s' % (rec.company_id.name, rec.name),
    'body': env.ref('survey.mail_template_user_input_invite', raise_if_not_found=False).body_html.replace("__URL__", url).replace("_email_", get_email(rec)).replace("_nombre_colegio_", rec.company_id.name).replace("_fecha_", fecha),
    'body_html': env.ref('survey.mail_template_user_input_invite', raise_if_not_found=False).body_html.replace("__URL__", url).replace("_email_", get_email(rec)).replace("_nombre_colegio_", rec.company_id.name).replace("_fecha_", fecha),
    'parent_id': None,
    'recipient_ids': [(6,0,rec.parent_id.child_ids.filtered(lambda x: x.partner_type == 'parent').ids)],
    'email_from': rec.company_id.email,
    'auto_delete': False,
  }
  env['mail.mail'].create(values).send()
]]></field>
  </record>
  <record id="personalizations_winwineducation.encuesta_preinscripcion" model="ir.actions.server">
    <field name="name">Encuesta - preinscripcion</field>
    <field ref="crm.model_crm_lead" name="model_id"/>
    <field name="state">code</field>
    <field ref="crm.model_crm_lead" name="binding_model_id"/>
    <field name="binding_type">action</field>
    <field name="code"><![CDATA[
company_survey_map = {
    # id compania : id encuesta
    # biro
    17: 27,
    # chesterton
    8: 28,
    # dickens
    14: 29,
    # ikastola
    10: 30,
    # molisano
    15: 31,
    # tolkien
    3: 32,
    # amundsen
    1: 33
}
for rec in records:
  survey_id=company_survey_map.get(rec.company_id.id)
  if not survey_id:
    raise Warning('Debe asignarle una compañia a la oportunidad para enviar esta encuesta')
  # Creo la respuesta con la compañia correspondiente
  survey_user_input = env['survey.survey'].browse(survey_id).with_context(default_input_type="link")._create_answer(email=rec.email_from, company_id=rec.company_id.id)

  url = survey_user_input._get_survey_url()
  fecha = (datetime.date.today() + dateutil.relativedelta.relativedelta(days=10)).strftime("%d/%m/%Y")
  values = {
    'model': 'crm.lead',
    'res_id': rec.id,
    'subject': 'Colegio %s - Encuesta Pre-inscripción' % (rec.company_id.name),
    'body': env.ref('__export__.mail_template_84_b9379ca1', raise_if_not_found=False).body_html.replace("__url__", url).replace("_nombre_colegio_", rec.company_id.name).replace("_fecha_", fecha),
    'body_html': env.ref('__export__.mail_template_84_b9379ca1', raise_if_not_found=False).body_html.replace("__url__", url).replace("_nombre_colegio_", rec.company_id.name).replace("_fecha_", fecha),
    'parent_id': None,
    'email_from': rec.company_id.email,
    'email_to':rec.email_from,
    'auto_delete': False,
  }
  env['mail.mail'].create(values).send()
]]></field>
  </record>
  <record id="personalizations_winwineducation.grupos_solicitud_datos_personales" model="ir.actions.server">
    <field name="name">Grupos - Solicitud Datos Personales</field>
    <field ref="academic.model_academic_group" name="model_id"/>
    <field name="state">code</field>
    <field ref="academic.model_academic_group" name="binding_model_id"/>
    <field name="binding_type">action</field>
    <field name="code"><![CDATA[
action = env.ref('personalizations_winwineducation.alumno_solicitud_datos_personales')
action = action.read()[0]
action['context'] = {'students': records.mapped('student_ids').ids}
]]></field>
  </record>
  <record id="personalizations_winwineducation.ir_act_server_1013_83bfd3d4" model="ir.actions.server">
    <field name="name">Elegir primer token de pago disponible</field>
    <field ref="sale_subscription.model_sale_subscription" name="model_id"/>
    <field name="state">code</field>
    <field ref="sale_subscription.model_sale_subscription" name="binding_model_id"/>
    <field name="binding_type">action</field>
    <field name="code"><![CDATA[

without = []
duplicated = []
for rec in records.filtered(lambda x: not x.payment_token_id):
  # por si en el name no tiene nombre ed flia concanteado, primero buscamos así par aminimizar errores posibnles y concatenamos flia, si luego no se encuentra buscamos por
  # name que deberia contener nombre de flia
  token = rec.env['payment.token'].search([('partner_id.display_name', 'ilike', '%s, %s' % (rec.partner_id.name, rec.name.strip()))])
  if not token:
    token = rec.env['payment.token'].search([('partner_id.display_name', 'ilike', rec.name.strip())])
  if not token:
    token = rec.env['payment.token'].search([('partner_id', '=', rec.partner_id.id)])

  if len(token) == 1:
    rec.write({'payment_token_id': token.id})
  elif token:
    duplicated.append('Suscripción: %s, Tokens: %s' % (rec.id, token.ids))
  else:
    without.append(rec.id)
env.cr.commit()


if without or duplicated:
  msg = 'Tuvimos algunos errores con algunas suscripciones:'
  if without:
    more_info = []
    msg += '\n\n* No pudimos encontrar token para %s suscripciones %s' % (len(without), without)

    for sub in env['sale.subscription'].browse(without):
      sug_token = rec.env['payment.token'].search([('partner_id.commercial_partner_id', '=', sub.partner_id.commercial_partner_id.id)], limit=1)
      if sug_token.id:
        more_info.append('Subscripcion %s (id %s): token probable %s (id %s)' % (sub.partner_id.name, sub.id, sug_token.partner_id.name, sug_token.id))
    if more_info:
      msg += '\n\n* Algunos tips para suscripciones que no encontramos \n **%s' % ('\n **'.join(more_info))

  if duplicated:
    msg += '\n\n* Encontramos dos tokens en %s suscripciones %s' % (len(duplicated), duplicated)
  company = rec.env.user.company_id
  used_tokens = model.search([('company_id', '=', company.id), ('payment_token_id', '!=', False)]).mapped('payment_token_id')
  unused_tokens = rec.env['payment.token'].search([('acquirer_id.company_id', '=', company.id), ('id', 'not in', used_tokens.ids)])
  if unused_tokens:
    msg += '\n\n* Hay %s tokens que estan sin uso: %s' % (len(unused_tokens), unused_tokens)
  raise Warning(msg)
  # raise Warning('No pudimos encontrar token para estos ids de suscripcion %s' % without)]]></field>
  </record>
  <record id="personalizations_winwineducation.ir_act_server_1014_ddaf0a26" model="ir.actions.server">
    <field name="name">Validar</field>
    <field ref="account_payment_group.model_account_payment_group" name="model_id"/>
    <field name="state">code</field>
    <field ref="account_payment_group.model_account_payment_group" name="binding_model_id"/>
    <field name="binding_type">action</field>
    <field name="code"><![CDATA[

records.filtered(lambda x: x.state in ['draft','confirmed']).post()

# intento para que funcione desde active learning
# for rec in records:
#   rec.with_context(company_id=rec.company_id.id, default_company_id=rec.company_id.id, force_company=rec.company_id.id).post()]]></field>
  </record>
<record id="personalizations_winwineducation.ir_act_server_1015_2bc2960f" model="ir.actions.server">
    <field name="name">Crear cobros TuCuota</field>
    <field ref="sale_subscription.model_sale_subscription" name="model_id"/>
    <field name="state">code</field>
    <field ref="sale_subscription.model_sale_subscription" name="binding_model_id"/>
    <field name="binding_type">action</field>
    <field name="code"><![CDATA[

payment_type = 'inbound'
partner_type = 'customer'
payment_method = env.ref('payment.account_payment_method_electronic_in')

domain = [('in_progress', '=', True), ('payment_token_id.acquirer_id.journal_id', '!=', False)]
if records:
  domain.append(('id', 'in', records.ids))
records = records.search(domain)

date = datetime.date.today()


for rec in records:
  communication = "SUB-ID:%s" % rec.id
  journal = rec.payment_token_id.acquirer_id.journal_id
  pay_context = {
      'default_company_id': rec.company_id.id,
      'default_partner_type': partner_type,
      'default_partner_id': rec.partner_id.id,
  }
  pay_group_vals= {
    'payment_date': date,
    'communication': communication,
  }
  payment_group = rec.env['account.payment.group'].with_context(pay_context).create(pay_group_vals)
  payment_group.payment_ids.create({
    'payment_group_id': payment_group.id,
    'payment_type': payment_type,
    'partner_type': partner_type,
    'company_id': rec.company_id.id,
    'partner_id': payment_group.partner_id.id,
    'payment_token_id': rec.payment_token_id.id,
    'amount': rec.recurring_total,
    'journal_id': journal.id,
    'payment_method_id': payment_method.id,
    'payment_date': date,
    'communication': communication,
  })
  # payment_group.post()




]]></field>
  </record>
<record id="personalizations_winwineducation.factura_cobros_tucuota" model="ir.actions.server">
    <field name="name">Crear cobros TuCuota</field>
    <field ref="account.model_account_move" name="model_id"/>
    <field name="state">code</field>
    <field ref="account.model_account_move" name="binding_model_id"/>
    <field name="binding_type">action</field>
    <field name="code"><![CDATA[
payment_type = 'inbound'
partner_type = 'customer'
payment_method = env.ref('payment.account_payment_method_electronic_in')

#Busco si existe alguna suscripción asociada a la familia y devuelvo la primera que encuentro
def get_subscription(familia):
  return env['sale.subscription'].search([('stage_id','=',2), ('partner_id','=',familia.id), ('payment_token_id', '!=',False)], limit=1)
for rec in records.filtered(lambda x: x.journal_document_type_id.document_type_id.internal_type == 'debit_note' and x.journal_id.type == 'sale'):
  suscripcion = get_subscription(rec.partner_id)
  if suscripcion:
    communication = "SUB-ID:%s" % suscripcion.id
    journal = suscripcion.payment_token_id.acquirer_id.journal_id
    pay_context = {
        'default_company_id': suscripcion.company_id.id,
        'default_partner_type': partner_type,
        'default_partner_id': suscripcion.partner_id.id,
    }
    pay_group_vals= {
      'payment_date': datetime.date.today(),
      'communication': communication,
    }
    payment_group = rec.env['account.payment.group'].with_context(pay_context).create(pay_group_vals)
    payment_group.payment_ids.create({
      'payment_group_id': payment_group.id,
      'payment_type': payment_type,
      'partner_type': partner_type,
      'company_id': suscripcion.company_id.id,
      'partner_id': payment_group.partner_id.id,
      'payment_token_id': suscripcion.payment_token_id.id,
      'amount': rec.amount_total, #o mejor ponemos el residual?
      'journal_id': journal.id,
      'payment_method_id': payment_method.id,
      'payment_date': datetime.date.today(),
      'communication': communication,
    })
]]></field>
  </record>
  <record id="personalizations_winwineducation.ir_act_server_1025_13f9314d" model="ir.actions.server">
    <field name="name">Suscripciones - Crear oportunidad de Rematriculación</field>
    <field ref="sale_subscription.model_sale_subscription" name="model_id"/>
    <field name="state">code</field>
    <field ref="sale_subscription.model_sale_subscription" name="binding_model_id"/>
    <field name="binding_type">action</field>
    <field name="code"><![CDATA[
def crear_oportunidad():
  renewal = env['crm.lead'].create({
    'name': rec.name + "- Re-matriculación",
    'user_id': env.user.id,
    'partner_id': env['res.partner'].search([('name','=',rec.name),('parent_id','=',rec.partner_id.id)]).id,
    'type': 'opportunity',
    'team_id': env['crm.team'].sudo().search([('x_type','=', 'r'),('company_id','=',env.user.company_id.id)],limit=1).id
  })
  return renewal

for rec in records:
  #raise Warning(env['crm.team'].search([('x_type','=', 'r'),('company_id','=',env.user.company_id.id)],limit=1).name)
  if rec.x_renewal_lead_id:
    raise Warning("El alumno %s ya tiene una oportunidad de rematriculación" %rec.name)
  else:
    renewal = crear_oportunidad()
    rec.sudo().update({
      'x_renewal_lead_id': renewal.id,
      'team_id': env['crm.team'].sudo().search([('x_type','=', 'r'),('company_id','=',env.user.company_id.id)],limit=1).id
    })
]]></field>
  </record>
  <record id="alumnos_egresados_action" model="ir.actions.server">
    <field name="name">Alumnos Egresados</field>
    <field ref="base.model_res_partner" name="model_id"/>
    <field name="state">code</field>
    <field ref="base.model_res_partner" name="binding_model_id"/>
    <field name="binding_type">action</field>
    <field name="code"><![CDATA[
if env.user.company_id.study_plan_id.level_ids:
  ultimo_nivel_plan = env.user.company_id.study_plan_id.level_ids.sorted(key=lambda x: x.sequence, reverse=True)[0].id
  #No tienen que ser de este año los cursos actuales
  cursos_ultimo_nivel = env['academic.group'].search([('level_id','=',ultimo_nivel_plan),('year','<',datetime.datetime.now().year)]).ids
  action = {
    'name': 'Alumnos Egresados',
    'view_mode': 'tree, form',
    'view_type': 'form',
    'views': [(env.ref('personalizations_winwineducation.reporte_alumnos_view_tree').id, 'tree'),(False,'form')],
    'type': 'ir.actions.act_window',
    'res_model': 'res.partner',
    'domain': [('partner_type','=','student'),('student_group_ids','!=',False),('curso_actual','in', cursos_ultimo_nivel)]
  }
else:
  raise Warning("La compañia actual no tiene seteado un plan de estudio o niveles dentro del mismo! \nRecordar que este reporte solo sirve estando dentro de cada colegio")
]]></field>
  </record>
  <record id="alumnos_perdidos_action" model="ir.actions.server">
    <field name="name">Alumnos Perdidos</field>
    <field ref="base.model_res_partner" name="model_id"/>
    <field name="state">code</field>
    <field ref="base.model_res_partner" name="binding_model_id"/>
    <field name="binding_type">action</field>
    <field name="code"><![CDATA[
#Esto me sirve por si quiero que puedan ver los perdidos con active learning
# ultimo_nivel_plan = []
# ultimo_nivel_plan.append([x.study_plan_id.level_ids.sorted(key=lambda x: x.sequence, reverse=True)[0].id for x in env['res.company'].search([('study_plan_id','!=',False)])])
if env.user.company_id.study_plan_id.level_ids:
  ultimo_nivel_plan = env.user.company_id.study_plan_id.level_ids.sorted(key=lambda x: x.sequence, reverse=True)[0].id
  #No tienen que ser de este año los cursos actuales
  cursos_ultimo_nivel = env['academic.group'].search([('level_id','=',ultimo_nivel_plan),('year','<',datetime.datetime.now().year)]).ids

  action = {
    'name': 'Alumnos Perdidos',
    'view_mode': 'tree,form',
    'view_type': 'form',
    'views': [(env.ref('personalizations_winwineducation.reporte_alumnos_view_tree').id, 'tree'),(False,'form')],
    'type': 'ir.actions.act_window',
    'res_model': 'res.partner',
    'domain': [('partner_type','=','student'),('student_group_ids','!=',False),('x_matricula','=',False),('curso_actual','not in', cursos_ultimo_nivel)]
  }
else:
  raise Warning("La compañia actual no tiene seteado un plan de estudio o niveles dentro del mismo! \nRecordar que este reporte solo sirve estando dentro de cada colegio")
]]></field>
  </record>
</odoo>

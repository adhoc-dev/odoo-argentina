<?xml version='1.0' encoding='UTF-8'?>
<odoo>
  <record id="personalizations_winwineducation.validar_campos_215e7039-4d1f-4d19-b161-7cec739e47c2" model="base.automation">
    <field name="name">Validar campos y aprobación mantenimiento</field>
    <field ref="maintenance.model_maintenance_request" name="model_id"/>
    <field name="state">code</field>
    <field name="binding_type">action</field>
    <field name="code">

# Reclamar presupuesto
rec_presupuesto = env['maintenance.stage'].browse(2)
if records.filtered(lambda x: not x.x_studio_agendar_presupuesto and x.stage_id.sequence &gt; rec_presupuesto.sequence):
  raise Warning('Por favor complete el campo "Agendar presupuesto"')

# Pendiente de aprobacion
rec_pendiente_aprobacion = env['maintenance.stage'].browse(5)
if records.filtered(lambda x: (not x.x_studio_costo_materiales or not x.x_studio_costo_mano_de_obra or not x.x_studio_adjuntar_presupuesto) and x.stage_id.sequence &gt; rec_pendiente_aprobacion.sequence):
  raise Warning('Por favor complete el campo "Costo de Materiales", "Costo de Mano de Obra" y "Adjuntar Presupuesto"')

# contratar proveedor
rec_contratar_proveedor = env['maintenance.stage'].browse(7)
if records.filtered(lambda x: (not x.schedule_date or not x.x_studio_costo_materiales_final or not x.x_studio_costo_mano_de_obra_final) and x.stage_id.sequence &gt; rec_pendiente_aprobacion.sequence):
  raise Warning('Por favor complete el campo "Costo Materiales Final", "Costo Mano de Obra Final" y "Fecha estimada de ejecución"')

rec_aprobado = env['maintenance.stage'].browse(6)
aprobador_group_id = 106
# solo permitir aprobar a "aprobador de mantenimientos"
if any(x.stage_id.id == rec_aprobado.id for x in records) and aprobador_group_id not in env.user.groups_id.ids:
  raise Warning('Su usuario no está autorizado para aprobar mantenimientos')

# solo permitir a etapa siguiente o volver de "ejecutado" a "contratar proveedor"
stage_ejecutado_id = 3
stage_contratar_proveedor_id = 7
for rec in records:
  old_stage = env.context['old_values'][rec.id].get('stage_id')
  if not old_stage:
    continue
  old_stage_id = old_stage[0]
  new_stage = record.stage_id
  if old_stage_id != new_stage.id and (new_stage.id != stage_contratar_proveedor_id or old_stage_id != stage_ejecutado_id):
    previous_stage = env['maintenance.stage'].search([('sequence', '&lt;', new_stage.sequence)], limit=1, order='sequence desc')
    if previous_stage.id != old_stage_id:
      raise Warning('No puede saltear etapas y solo se puede volver de ejecutado a "Contratar Proveedor"')</field>
    <field name="trigger">on_write</field>
  </record>
  <record id="personalizations_winwineducation.base_automation_2_b3bd140b" model="base.automation">
    <field name="name">Setear compania de sitio web a mantenimiento</field>
    <field ref="maintenance.model_maintenance_request" name="model_id"/>
    <field name="state">code</field>
    <field name="binding_type">action</field>
    <field name="code">


website_id= env.context.get('website_id')
if website_id:
  record.write({'company_id': env['website'].browse(website_id).company_id.id})</field>
    <field name="trigger">on_create</field>
  </record>
  <record id="personalizations_winwineducation.base_automation_3_9a0b661d" model="base.automation">
    <field name="name">Llevar campo name a facturas desde suscripcion</field>
    <field ref="account.model_account_move" name="model_id"/>
    <field name="state">code</field>
    <field name="binding_type">action</field>
    <field name="code">

for rec in records.filtered('invoice_line_ids'):
  subscription = rec.invoice_line_ids.mapped('subscription_id')
  if len(subscription) != 1:
    continue
  rec.update({'ref': subscription.name})
</field>
    <field name="trigger">on_create</field>
  </record>
  <record id="personalizations_winwineducation.base_automation_4_b0dca8d6" model="base.automation">
    <field name="name">Agregar seguidor en ficha de empleados</field>
    <field ref="hr.model_hr_employee" name="model_id"/>
    <field name="state">followers</field>
    <field name="binding_type">action</field>
    <field name="trigger">on_write</field>
  </record>
  <record id="personalizations_winwineducation.base_automation_5_061c05ce" model="base.automation">
    <field name="name">Aviso de modificación en ficha de empleados</field>
    <field ref="hr.model_hr_employee" name="model_id"/>
    <field name="state">email</field>
    <field name="binding_type">action</field>
    <field name="trigger">on_write</field>
  </record>
  <record id="personalizations_winwineducation.base_automation_8_95aa062f" model="base.automation">
    <field name="name">Encuesta - Restricción Motivos No Vacante</field>
    <field ref="crm.model_crm_lead" name="model_id"/>
    <field name="state">code</field>
    <field name="binding_type">action</field>
    <field name="code">

if not record.x_motive_no_vacancy:
  record.write({'x_motive_no_vacancy_specification_id': False})
#if not record.x_motive_no_vacancy_specification_id:
  
#  raise Warning(record.x_motive_no_vacancy_specification_id)
if record.stage_id.id in [10,15] and (not record.x_motive_no_vacancy or not record.x_motive_no_vacancy_specification_id):
  
 raise Warning("Para pasar a la etapa seleccionada, debe indicar los motivos por los cuáles no se otorgó la vacante.\nDichos campos se encuentran en la solapa Motivos No Vacante")</field>
    <field name="trigger">on_write</field>
  </record>
  <record id="personalizations_winwineducation.base_automation_10_23e78eb9" model="base.automation">
    <field name="name">Validar formato x_studio_numero_de_documento_hijo</field>
    <field ref="crm.model_crm_lead" name="model_id"/>
    <field name="state">code</field>
    <field name="binding_type">action</field>
    <field name="code">
if record.x_studio_numero_de_documento and (len(str(record.x_studio_numero_de_documento)) &gt; 8 or len(str(record.x_studio_numero_de_documento)) &lt; 5):
  raise Warning("El numero de documento del hijo debe contener como max 8 caracteres y como min 5")</field>
    <field name="on_change_fields">x_studio_numero_de_documento</field>
    <field name="trg_date_range_type">day</field>
    <field name="trigger">on_change</field>
  </record>
  <record id="personalizations_winwineducation.base_automation_11_cdfcfe74" model="base.automation">
    <field name="name">Validar formato x_studio_n_documento_padre</field>
    <field ref="crm.model_crm_lead" name="model_id"/>
    <field name="state">code</field>
    <field name="binding_type">action</field>
    <field name="code">
if record.x_studio_n_documento_padre and (len(str(record.x_studio_n_documento_padre)) &gt; 8 or len(str(record.x_studio_n_documento_padre)) &lt; 5):
  raise Warning("El numero de documento del Padre debe contener como max 8 caracteres y como min 5")</field>
    <field name="on_change_fields">x_studio_n_documento_padre</field>
    <field name="trg_date_range_type">day</field>
    <field name="trigger">on_change</field>
  </record>
  <record id="personalizations_winwineducation.base_automation_13_1733191f" model="base.automation">
    <field name="name">validar telefono</field>
    <field ref="crm.model_crm_lead" name="model_id"/>
    <field name="state">code</field>
    <field name="binding_type">action</field>
    <field name="code">
def checkvalidNumber(phone_number):
    if len(phone_number) &gt; 15:
      return False
    if phone_number.find("+") != -1 and not phone_number.startswith("+"):
      return False
    T={"-":0,"+":0,"_":0}
    for i in phone_number:
        if i in list(T.keys()):
            if (i=="_" or i=="-") and (T["-"]&gt;=1 or T['_']&gt;=1):
                return False
            elif i=="+" and T[i]&gt;=1:
                return False
            else:
                T[i]+=1
        elif not i.isdigit():
           return False
    return True
  
if record.phone and not checkvalidNumber(record.phone):
  raise Warning("¡El formato del telefono no es correcto! \n Usar algo del tipo: +54114078-9000")


</field>
    <field name="on_change_fields">phone</field>
    <field name="trigger">on_change</field>
  </record>
  <record id="personalizations_winwineducation.base_automation_14_697aa184" model="base.automation">
    <field name="name">validar email formato</field>
    <field ref="crm.model_crm_lead" name="model_id"/>
    <field name="state">code</field>
    <field name="binding_type">action</field>
    <field name="code">
def check_eamil(email):
  res = True
  if email.count('@') ==  1:
      user, domain = email.split('@')
  
      if domain.count('.') &gt;= 1 and not domain.startswith('.') and not domain.endswith('.'):
          pass
      else:
          res = False
  
      user = user.replace('.', '_')
      user = user.replace('-', '_')
      if not user.isidentifier():
          res = False
  else:
      res = False
  return res
  
if record.email_from and not check_eamil(record.email_from):
  raise Warning("¡El formato del mail no es correcto! \n Usar algo del estilo de: info@example.com")


</field>
    <field name="on_change_fields">email_from</field>
    <field name="trg_date_range_type">day</field>
    <field name="trigger">on_change</field>
  </record>
  <record id="personalizations_winwineducation.base_automation_15_fcfdea46" model="base.automation">
    <field name="name">Constrains para validar ciertos valores</field>
    <field ref="crm.model_crm_lead" name="model_id"/>
    <field name="state">code</field>
    <field name="binding_type">action</field>
    <field name="code">
stage_ID = 9
sequence_limit = env['crm.stage'].browse(stage_ID).sequence
msg = []
for rec in records:
    # Constrain formato n° de documento: validamos que haya compleado los campos de DNI al pasar a una etapa mayor
    if rec.stage_id.sequence &gt;= sequence_limit and rec.x_type == 'a' and (not rec.x_studio_n_documento_padre or not rec.x_studio_numero_de_documento):
      raise Warning("Establezca un valor para el campo Numero de Documento Padre/Hijo")
    # Recoremos todas las iniciativas menos la actual
    domain = [('id', '!=', rec.id), ('company_id', '=', rec.company_id.id)]
    if rec.x_type == 'a' and rec.x_studio_numero_de_documento:
        repeated_lead = records.search(domain + [('x_studio_numero_de_documento', '=', rec.x_studio_numero_de_documento)], limit=1)
        if repeated_lead:
            msg.append('El numero de documento del hijo existe en la iniciativa!: %s' % (repeated_lead.id))
    if rec.phone:
        repeated_lead = records.search(domain + [('phone', '=', rec.phone)], limit=1)
        if repeated_lead:
            msg.append('El teléfono existe en la iniciativa!: %s' % (repeated_lead.id))
    if rec.email_from:
        repeated_lead = records.search(domain + [('email_from', '=', rec.email_from)], limit=1)
        if repeated_lead:
            msg.append('El email existe en la iniciativa!: %s' % (repeated_lead.id))
    try:
        if rec.x_mother_nosis:
            if int(rec.x_mother_nosis) &lt; 1 or int(rec.x_mother_nosis) &gt; 1000:
                msg.append('El campo nosis indicado en los datos de la madre debe ser computado entre los valores 1 y 1000')
        if rec.x_father_nosis:
            if int(rec.x_father_nosis) &lt; 1 or int(rec.x_father_nosis) &gt; 1000:
                msg.append('El campo nosis indicado en los datos del padre debe ser computado entre los valores 1 y 1000')
        if rec.stage_id.sequence &gt; env['crm.stage'].browse(17).sequence:
            if not (rec.x_mother_nosis and rec.x_father_nosis):
                msg.append('La oportunidad no puede ser enviada a esta etapa sin tener seteados los campos nosis del padre y de la madre')
    except:
        msg.append('El campo nosis de la madre y del padre deben ser enteros contenidos entre 1 y 1000')
    if rec.stage_id.sequence &gt; env['crm.stage'].browse(17).sequence:
        if not (rec.x_mother_approve and rec.x_father_approve):
            msg.append('La oportunidad no puede ser enviada a esta etapa sin tener seteados los campos de aprobacion del padre y de la madre')
if msg:
    raise Warning('\n'.join(msg))</field>
    <field name="trigger">on_create_or_write</field>
  </record>
  <record id="personalizations_winwineducation.base_automation_16_dd3c4448" model="base.automation">
    <field name="name">Enviar mail de notificación de recepción</field>
    <field ref="crm.model_crm_lead" name="model_id"/>
    <field name="state">email</field>
    <field name="binding_type">action</field>
    <field name="filter_domain">["&amp;","&amp;",["name","=","consulta desde web"],["x_studio_alumno","!=","False"],["email_from","!=","False"]]</field>
    <field name="trigger">on_create</field>
  </record>
  <record id="personalizations_winwineducation.base_automation_25_92a2bd56" model="base.automation">
    <field name="name">Amundsen - Notificación recepción</field>
    <field ref="crm.model_crm_lead" name="model_id"/>
    <field name="state">email</field>
    <field name="binding_type">action</field>
    <field name="filter_domain">["&amp;","&amp;","&amp;",["name","=","consulta desde web"],["x_studio_alumno","!=","False"],["email_from","!=","False"],["team_id","=",1]]</field>
    <field name="trigger">on_create</field>
  </record>
  <record id="personalizations_winwineducation.base_automation_26_038460e3" model="base.automation">
    <field name="name">Chesterton - Notificación recepción</field>
    <field ref="crm.model_crm_lead" name="model_id"/>
    <field name="state">email</field>
    <field name="binding_type">action</field>
    <field name="filter_domain">["&amp;","&amp;","&amp;",["name","=","consulta desde web"],["x_studio_alumno","!=","False"],["email_from","!=","False"],["team_id","=",4]]</field>
    <field name="trigger">on_create</field>
  </record>
  <record id="personalizations_winwineducation.base_automation_27_e6801d73" model="base.automation">
    <field name="name">Ikastola - Notificación recepción</field>
    <field ref="crm.model_crm_lead" name="model_id"/>
    <field name="state">email</field>
    <field name="binding_type">action</field>
    <field name="filter_domain">["&amp;","&amp;","&amp;",["name","=","consulta desde web"],["x_studio_alumno","!=","False"],["email_from","!=","False"],["team_id","=",8]]</field>
    <field name="trigger">on_create</field>
  </record>
  <record id="personalizations_winwineducation.base_automation_28_955d7de2" model="base.automation">
    <field name="name">Tolkien - Notificación recepción</field>
    <field ref="crm.model_crm_lead" name="model_id"/>
    <field name="state">email</field>
    <field name="binding_type">action</field>
    <field name="filter_domain">["&amp;","&amp;","&amp;",["name","=","consulta desde web"],["x_studio_alumno","!=","False"],["email_from","!=","False"],["team_id","=",6]]</field>
    <field name="trigger">on_create</field>
  </record>
  <record id="personalizations_winwineducation.base_automation_32_93342eb6" model="base.automation">
    <field name="name">Equipos de venta por compañia</field>
    <field ref="crm.model_crm_lead" name="model_id"/>
    <field name="state">code</field>
    <field name="binding_type">action</field>
    <field name="code">
for rec in records.filtered('company_id'):
  if not rec.team_id or rec.team_id.company_id != rec.company_id:
    team = env['crm.team'].sudo().search([('company_id', '=', rec.company_id.id)], limit=1)
    rec.sudo().write({'team_id': team.id})
</field>
    <field name="trigger">on_create_or_write</field>
  </record>
  <record id="personalizations_winwineducation.base_automation_33_7da89051" model="base.automation">
    <field name="name">Solicitudes - Activity y Mail a Entrevistadores</field>
    <field ref="hr_recruitment.model_hr_applicant" name="model_id"/>
    <field name="state">code</field>
    <field name="binding_type">action</field>
    <field name="code">
def mandar_aviso_entrevista(candidato, entrevistador):
  if entrevistador.related_user_id:
    rec.env['mail.activity'].create({
      'activity_type_id': 6, #Recordatorio
      'summary': 'Entrevistar a: ' + candidato.name,
      'automated': True,
      'user_id': entrevistador.related_user_id.id,
      'date_deadline': datetime.date.today() + datetime.timedelta(days=1),
      'res_model_id': record.env['ir.model']._get(record._name).id,
      'res_id': rec.id,
    })
  cv = rec.attachment_ids.filtered(lambda x:x.name)
  if cv:
    template_id = env['mail.template'].browse(55)
    template_id.with_context(email_to = entrevistador.email, entrevistador = entrevistador.name).send_mail(candidato.id, email_values={'attachment_ids': cv.ids}) #La plantilla corresponde al modelo candidato
  else:
    raise Warning("No cargó ningún CV o adjunto. Cargue uno y vuelva a cambiar de etapa")

def completo_evaluacion(entrevistadores):
  #Verificamos que los entrevistadores correspondientes hayan completado la evaluacion
  result = []
  for rec in entrevistadores:
    msg = []
    if rec.x_knowledge &gt; 10  or rec.x_knowledge &lt; 1:
      msg.append("Debe establecer un valor de Conocimiento (rango del 1 al 10)")
    if rec.x_honesty &gt; 10  or rec.x_honesty &lt; 1:
      msg.append("Debe establecer un valor de Honestidad (rango del 1 al 10)")
    if rec.x_energy &gt; 10  or rec.x_energy &lt; 1:
      msg.append("Debe establecer un valor de Energía (rango del 1 al 10)")
    if rec.x_capability &gt; 10  or rec.x_capability &lt; 1:
      msg.append("Debe establecer un valor de Capacidad (rango del 1 al 10)")
    if msg:
      msg = ["El entrevistador de la "+ rec.x_applicant_stage_id.name + ": "] + msg + ['\n']
      result.extend(msg)
  if result:
    raise Warning('\n'.join(result))


# if 'stage_id' in list(env.context['old_values'].values())[0] and list(env.context['old_values'].values())[0]['stage_id'] != list(env.context['old_values'].values())[0]['last_stage_id']:

for rec in records:
  if rec.stage_id.id in [2,3,6,12,13,10]: #Las etapas de entrevista y psicotécnico
    #Chequeo si cargó un entrevistador para las etapas de entrevista
    if rec.stage_id.id in [2,3,6,12,13] and not (rec.x_appraisal_ids.filtered(lambda x: x.x_applicant_stage_id.sequence == rec.stage_id.sequence).id):
     raise Warning("No se ha seteado un entrevistador para esta etapa")

    #De ser así, busco los entrevistadores anteriores y verifico que hayan completado las calificaciones
    #El metodo que verifica me va a dar un mensaje si no se completó. Entonces acá ya verifico que los anteriores tengan algo, desde la primer entrevista a la quinta (si la hubiese)
    entrevistadores_anteriores = rec.x_appraisal_ids.filtered(lambda x: x.x_applicant_stage_id.sequence &lt; rec.stage_id.sequence) #Esto no me va a servir para el primer entrevistador
    if entrevistadores_anteriores:
      completo_evaluacion(entrevistadores_anteriores)
      entrevistador = rec.x_appraisal_ids.filtered(lambda e: e.x_applicant_stage_id.sequence == rec.stage_id.sequence)
      if rec.stage_id.id in [3,6,12,13]: #Solo se manda el mail si me encuentro en las etapas de Entrevistas
        mandar_aviso_entrevista(rec,entrevistador.x_partner_id)

    elif rec.stage_id.id == 2:  #Etapa - Primer entrevista
      entrevistador = rec.x_appraisal_ids.filtered(lambda e: e.x_applicant_stage_id.sequence == rec.stage_id.sequence)
      mandar_aviso_entrevista(rec,entrevistador.x_partner_id)
      </field>
    <field name="trigger">on_write</field>
    <field name="trigger_field_ids" eval="[(4,ref('hr_recruitment.field_hr_applicant__stage_id'))]"/>
  </record>
  <record id="personalizations_winwineducation.base_automation_35_45f4ba59" model="base.automation">
    <field name="name">Automatizaciones para Tu Cuota</field>
    <field ref="account.model_account_payment" name="model_id"/>
    <field name="state">code</field>
    <field name="binding_type">action</field>
    <field name="code">

for rec in records.filtered('payment_transaction_id'):

  old_state = env.context.get('old_values').get(record.id).get('state')
  # si no es cambio de estado seguimos
  if rec.state == old_state:
    continue

  if rec.state == 'cancelled' and rec.payment_transaction_id.state in ['pending', 'done']:
    raise Warning('No puede cancelar el pago porque la transacción a través de tu cuota está siendo procesada o ya ha sido procesada')
  elif rec.state == 'draft' and old_state == 'cancelled':
    # quedamos en desvincular transaccion si se re abre, para que se genere una nueva con lo que corresponde
    # rec.payment_transaction_id.write({'state': 'draft'})
    rec.write({'payment_transaction_id': False})
  elif rec.state == 'cancelled' and rec.payment_transaction_id.state == 'draft':
    # solo cambiamos si la transaccion esta en borrador, porque si esta, por ejemplo en error, queremos que quede en error
    rec.payment_transaction_id._set_transaction_cancel()



</field>
    <field name="trigger">on_write</field>
  </record>
  <record id="personalizations_winwineducation.base_automation_37_6e9b029c" model="base.automation">
    <field name="name">Solicitudes - Etapa Psicotécnico</field>
    <field ref="hr_recruitment.model_hr_applicant" name="model_id"/>
    <field name="state">code</field>
    <field name="binding_type">action</field>
    <field name="code">

for rec in records.filtered(lambda x: x.stage_id.id == 10):
  cv = rec.env['ir.attachment'].search([('res_id', '=', rec.id), ('res_model', '=', rec._name), '|', ('name', 'ilike', 'CV'), ('name', 'ilike', 'curriculum')], limit=1)
  if cv:
    template_id = env['mail.template'].browse(58)
    template_id.send_mail(rec.id,email_values={'attachment_ids': [cv.id]}) #La plantilla corresponde al modelo candidato
  else:
    raise Warning("No ha adjuntado ningún CV en esta solicitud o un documento con un nombre identificatorio a un CV")

   </field>
    <field name="trigger">on_write</field>
  </record>
  <record id="personalizations_winwineducation.base_automation_39_b1ae537b" model="base.automation">
    <field name="name">Solicitudes - Etapa Descartar/Rechazo</field>
    <field ref="hr_recruitment.model_hr_applicant" name="model_id"/>
    <field name="state">code</field>
    <field name="binding_type">action</field>
    <field name="code">
for rec in records:
  if rec.stage_id.id == 8:
    if not rec.categ_ids.filtered(lambda x: 'Descarte' in x.name):
      raise Warning("No se ha agregado una etiqueta de Descarte")

    if len(rec.categ_ids.filtered(lambda x: 'Descarte' in x.name)) &gt; 1:
      raise Warning("Solo puede haber una etiqueta de Descarte")

  if rec.stage_id.id == 14:
    if not rec.categ_ids.filtered(lambda x: 'Rechazo' in x.name):
      raise Warning("No se ha agregado una etiqueta de Rechazo")

    if len(rec.categ_ids.filtered(lambda x: 'Rechazo' in x.name)) &gt; 1:
      raise Warning("Solo puede haber una etiqueta de Rechazo")







</field>
    <field name="trigger">on_write</field>
  </record>
  <record id="personalizations_winwineducation.base_automation_40_36f09c10" model="base.automation">
    <field name="name">Solicitudes - Forzar compañia con la del puesto de trabajo</field>
    <field ref="hr_recruitment.model_hr_applicant" name="model_id"/>
    <field name="state">code</field>
    <field name="binding_type">action</field>
    <field name="code">
for rec in records:
  if rec.job_id:
    rec.update({'company_id': rec.job_id.company_id.id}) 
</field>
    <field name="trigger">on_create</field>
  </record>
  <record id="personalizations_winwineducation.biro_notoficacion_re_2e298946-1e43-45b4-9eba-f1573e1846f8" model="base.automation">
    <field name="name">Molisano - Notificación recepción</field>
    <field ref="crm.model_crm_lead" name="model_id"/>
    <field name="state">email</field>
    <field name="binding_type">action</field>
    <field name="filter_domain">["&amp;","&amp;","&amp;",["name","=","consulta desde web"],["x_studio_alumno","!=","False"],["email_from","!=","False"],["team_id","=",14]]</field>
    <field name="trigger">on_create</field>
  </record>
  <record id="personalizations_winwineducation.base_automation_43_d5a5761a" model="base.automation">
    <field name="name">Alumnos - Archivar si no tiene suscrpciones activas</field>
    <field ref="base.model_res_partner" name="model_id"/>
    <field name="state">code</field>
    <field name="binding_type">action</field>
    <field name="code">
for rec in records.filtered(lambda x: not x.active and x.partner_type == 'student'):
  if rec.opportunity_ids:
       raise Warning("Solo puede archivar un contacto si no oportunidades activas.")  
  if env['sale.subscription'].search([('partner_id', '=', rec.id), ('stage_id', '!=', 4)],limit=1):
       raise Warning("Solo puede archivar un contacto si todas sus sucripciones están cerradas.")


</field>
    <field name="trigger">on_write</field>
  </record>
  <record id="personalizations_winwineducation.biro_notoficacion_re_c579c5c5-2c27-474f-87db-dab08381eeae" model="base.automation">
    <field name="name">Biró - Notoficación recepción</field>
    <field ref="crm.model_crm_lead" name="model_id"/>
    <field name="state">email</field>
    <field name="binding_type">action</field>
    <field name="filter_domain">["&amp;","&amp;","&amp;",["name","=","consulta desde web"],["x_studio_alumno","!=","False"],["email_from","!=","False"],["team_id","=",9]]</field>
    <field name="trigger">on_create</field>
  </record>
  <record id="personalizations_winwineducation.molisano_notificacio_eac58afe-e5ad-41a2-9a70-e7263a47c463" model="base.automation">
    <field name="name">Dickens - Notificación recepción</field>
    <field ref="crm.model_crm_lead" name="model_id"/>
    <field name="state">email</field>
    <field name="binding_type">action</field>
    <field name="filter_domain">["&amp;","&amp;","&amp;",["name","=","consulta desde web"],["x_studio_alumno","!=","False"],["email_from","!=","False"],["team_id","=",15]]</field>
    <field name="trigger">on_create</field>
  </record>
</odoo>

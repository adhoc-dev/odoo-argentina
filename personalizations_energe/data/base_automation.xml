<?xml version='1.0' encoding='UTF-8'?>
<odoo>
  <record model="base.automation" id="personalizations_energe.base_automation_2">
    <field name="name">Completar información de la iniciativa desde la mensajería</field>
    <field name="model_id" ref="calendar.model_mail_message"/>
    <field name="state">code</field>
    <field name="binding_type">action</field>
    <field name="code"># Available variables:
#  - env: Odoo Environment on which the action is triggered
#  - model: Odoo Model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - Warning: Warning Exception to use with raise
# To return an action, assign: action = {...}


def get_state(name='Buenos Aires'):
    if name == "Bs. As.":
        name = "Buenos Aires"
    res = env['res.country.state'].search(
        [('name', '=', name)]
    )
    return (res[0].id, res[0].name) if res else (False, False)


def clean_msg_footer(mensaje):
    mensaje = mensaje.replace(
        "\r\n\r\n--\r\nEste e-mail ha sido enviado desde el widget de consulta de (http://energe.com.ar)\r\n&lt;/pre&gt;",
        '').strip()
    mensaje = mensaje.replace(
        "\r\n\r\n--\r\nEste e-mail ha sido enviado desde el formulario de contacto de (http://energe.com.ar)\r\n&lt;/pre&gt;",
        '').strip()
    return mensaje


def extract_pattern_web(mensaje):
    """
    De: nombre apellido &lt;correo@electronico&gt;
    Teléfono: 12235346
    Provincia: Nombre pronvical &lt;contacto.ba@energe.com.ar&gt;

    Mensaje:
    esto es mensaje
    multi linea

    --
    Este e-mail ha sido enviado desde el formulario de contacto de (http://energe.com.ar)
    """
    values = dict()
    name = str()
    email = str()
    phone = str()
    state = str()
    try:
        mensaje = clean_msg_footer(mensaje)
        for line in mensaje.splitlines():
            if not line:
                continue
            if line.startswith("&lt;pre&gt;De: ") and not name:
                name, email = line[9:].split('&amp;lt;')
                name = name.strip()
                if '@' in email:
                    if email.endswith('&amp;gt;'):
                        email = email[:-4]
            elif line.startswith("Teléfono: ") and not phone:
                phone = line[10:].strip()
            elif line.startswith("Provincia: ") and not state:
                state = line[11:].split('&amp;lt;')[0].strip()
            elif line.startswith("Mensaje:"):
                break
            mensaje = mensaje.replace(line, '').strip()
        mensaje = mensaje.replace("Mensaje:", '').strip()

        state_id, state_name = get_state(state)
        values = {
            'description': mensaje,
            'contact_name': name,
            'email_from': email,
            'phone': phone,
            'state_id': state_id,
            'state_name': state_name,
        }
    except:
        pass
    return values


def extract_pattern_facebook(mensaje):
    """
    Nombre: Nombre y Apellido
    Teléfono: +123456789
    Correo electrónico: correo@electronico
    Ciudad: Nombre Ciudad

    Este es el mensaje
    multi linea
    """
    values = dict()
    name = str()
    email = str()
    phone = str()
    city = str()
    try:
        for line in mensaje.splitlines():
            mensaje = mensaje.replace(line, '').strip()
            if not line:
                continue
            if (line.startswith("&lt;pre&gt;Nombre:") or line.startswith("Nombre:")) and not name:
                name = line[12:].strip()
            elif line.startswith("Teléfono:") and not phone:
                phone = line[9:].strip()
            elif line.startswith("Correo electrónico:") and not email:
                email = line[19:].strip()
            elif line.startswith("Ciudad:") and not city:
                city = line[7:].strip()
                break
        mensaje = mensaje.replace("&lt;/pre&gt;", "").strip()
        state_id, state_name = get_state()
        values = {
            'description': mensaje,
            'contact_name': name,
            'email_from': email,
            'phone': phone,
            'city': city,
            'state_id': state_id,
            'state_name': state_name,
        }
    except:
        pass
    return values


active_model = env.context.get('active_model', False)
active_ids = env.context.get('active_ids', [])

if active_model == 'mail.message':
    messages = env[active_model].search([('id', 'in', active_ids)])
    lead_ids = [rec.res_id for rec in messages]
elif active_model == 'crm.lead':
    lead_ids = active_ids

leads = env['crm.lead'].search([('id', 'in', lead_ids)])
for lead in leads:
    # Procesar datos de correo
    ready = 'Los campos fueron actualizados desde el mensaje de correo'
    msg_ready = [msg.body for msg in lead.message_ids if ready in str(msg.body)]
    if not msg_ready:
        # raise Warning("mensajes %s" % str([item.read([]) for item in lead.message_ids]))
        for msg in lead.message_ids:
            values = dict()
            if msg.subject and msg.body.startswith("&lt;pre&gt;De:"):
                values = extract_pattern_web(msg.body)
            if msg.subject and msg.body.startswith("&lt;pre&gt;Nombre:"):
                values = extract_pattern_facebook(msg.body)
            if values:
                state_name = values.pop('state_name', False)
                lead.write(values)
                state_id = values.pop('state_id', False)
                if state_name:
                    values.update({'state': state_name})
                print_vals = '&lt;ul&gt;' + ''.join([
                    '&lt;li&gt;&lt;b&gt;' + item + '&lt;/b&gt;: ' + str(values[item]) + '&lt;/li&gt;'
                    for item in values]) + '&lt;/ul&gt;'
                # raise Warning ("values %s" % print_vals)
                lead.message_post(ready + '&lt;br/&gt;' + print_vals)
</field>
    <field name="filter_domain">["&amp;","&amp;",["model","=","crm.lead"],["subject","!=",False],["message_type","=","email"]]</field>
    <field name="trigger">on_create</field>
  </record>
</odoo>

<?xml version='1.0' encoding='UTF-8'?>
<odoo>
  <record model="ir.cron" id="personalizations_robertocala.ir_cron_31">
    <field name="name">Cancelar Remanente Auto (SO)</field>
    <field ref="delivery.model_sale_order" name="model_id"/>
    <field name="state">code</field>
    <field name="code"># Available variables:
#  - env: Odoo Environment on which the action is triggered
#  - model: Odoo Model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - Warning: Warning Exception to use with raise
# To return an action, assign: action = {...}
records = env[model._name].search([('state', 'in', ['sale', 'done'])])
for rec in records.mapped('order_line').filtered(lambda x: x.delivery_status == 'to deliver'):
  if rec.order_id.x_keep_remaining or not rec.order_id.picking_ids.filtered(lambda x: x.state == 'done'):
    continue
  pick_to_cancel = rec.order_id.picking_ids.filtered(lambda x: x.state not in ['done', 'cancel'])
  try:
    pick_to_cancel.action_cancel()
    rec.button_cancel_remaining()
  except Exception:
    log("No se pudo cancelar el remantente del producto %s de la orden %s" % (rec.product_id.name, rec.order_id.name), level='info')
    continue


</field>
    <field name="interval_number">1</field>
    <field name="interval_type">days</field>
    <field name="numbercall">-1</field>
  </record>
  <record model="ir.cron" id="personalizations_robertocala.ir_cron_32">
    <field name="name">Cancelar Remanente Auto (PO)</field>
    <field ref="purchase.model_purchase_order" name="model_id"/>
    <field name="state">code</field>
    <field name="code">
records = env[model._name].search([('state', 'in', ['purchase', 'done'])])
for rec in records:
  if rec.x_keep_remaining or not rec.picking_ids.filtered(lambda x: x.state == 'done'):
    continue
  pick = rec.picking_ids.filtered(lambda x: x.state not in ['done', 'cancel'])
  pick.move_line_ids.filtered(lambda x: x.qty_done == 0.0).unlink()
  pick.action_cancel()
  
  for line in rec.mapped('order_line').filtered(lambda x: x.delivery_status == 'to receive'):
    try:
      line.button_cancel_remaining()
    except Exception:
      log("No se pudo cancelar el remantente del producto %s de la orden %s" % (line.product_id.name, rec.name), level='info')
      continue

</field>
    <field name="interval_number">1</field>
    <field name="interval_type">days</field>
    <field name="numbercall">-1</field>
  </record>
</odoo>

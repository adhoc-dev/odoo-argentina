<odoo>

    <record id="protect_unlink_res_partner" model="base.automation">
        <field name="name">Protect syncked (unlink): res_partner</field>
        <field name="model_id" ref="base.model_res_partner"/>
        <field name="state">code</field>
        <field name="code">
if not env.context.get('odumbo_sync'):
  data_recs = env['ir.model.data'].sudo().search([('module', '=', '__odumbo__'), ('res_id', '=', records.ids), ('model', '=', record._name)])
  if data_recs:
    raise Warning('No se pueden borrar los registros sincronizados desde Neored. Registros %s' % data_recs.mapped('res_id'))

        </field>
        <field name="trigger">on_unlink</field>
    </record>

    <record id="protect_unlink_product_category" model="base.automation">
        <field name="name">Protect syncked (unlink): product_category</field>
        <field name="model_id" ref="product.model_product_category"/>
        <field name="state">code</field>
        <field name="code">
if not env.context.get('odumbo_sync'):
  data_recs = env['ir.model.data'].sudo().search([('module', '=', '__odumbo__'), ('res_id', '=', records.ids), ('model', '=', record._name)])
  if data_recs:
    raise Warning('No se pueden borrar los registros sincronizados desde Neored. Registros %s' % data_recs.mapped('res_id'))

        </field>
        <field name="trigger">on_unlink</field>
    </record>

    <record id="protect_unlink_product_public_category" model="base.automation">
        <field name="name">Protect syncked (unlink): product_public_category</field>
        <field name="model_id" ref="website_sale.model_product_public_category"/>
        <field name="state">code</field>
        <field name="code">
if not env.context.get('odumbo_sync'):
  data_recs = env['ir.model.data'].sudo().search([('module', '=', '__odumbo__'), ('res_id', '=', records.ids), ('model', '=', record._name)])
  if data_recs:
    raise Warning('No se pueden borrar los registros sincronizados desde Neored. Registros %s' % data_recs.mapped('res_id'))

        </field>
        <field name="trigger">on_unlink</field>
    </record>

    <record id="protect_unlink_uom_category" model="base.automation">
        <field name="name">Protect syncked (unlink): uom_category</field>
        <field name="model_id" ref="uom.model_uom_category"/>
        <field name="state">code</field>
        <field name="code">
if not env.context.get('odumbo_sync'):
  data_recs = env['ir.model.data'].sudo().search([('module', '=', '__odumbo__'), ('res_id', '=', records.ids), ('model', '=', record._name)])
  if data_recs:
    raise Warning('No se pueden borrar los registros sincronizados desde Neored. Registros %s' % data_recs.mapped('res_id'))

        </field>
        <field name="trigger">on_unlink</field>
    </record>

    <record id="protect_unlink_uom_uom" model="base.automation">
        <field name="name">Protect syncked (unlink): uom_uom</field>
        <field name="model_id" ref="uom.model_uom_uom"/>
        <field name="state">code</field>
        <field name="code">
if not env.context.get('odumbo_sync'):
  data_recs = env['ir.model.data'].sudo().search([('module', '=', '__odumbo__'), ('res_id', '=', records.ids), ('model', '=', record._name)])
  if data_recs:
    raise Warning('No se pueden borrar los registros sincronizados desde Neored. Registros %s' % data_recs.mapped('res_id'))

        </field>
        <field name="trigger">on_unlink</field>
    </record>

    <record id="protect_unlink_product_replenishment_cost_rule" model="base.automation">
        <field name="name">Protect syncked (unlink): product_replenishment_cost_rule</field>
        <field name="model_id" ref="product_replenishment_cost.model_product_replenishment_cost_rule"/>
        <field name="state">code</field>
        <field name="code">
if not env.context.get('odumbo_sync'):
  data_recs = env['ir.model.data'].sudo().search([('module', '=', '__odumbo__'), ('res_id', '=', records.ids), ('model', '=', record._name)])
  if data_recs:
    raise Warning('No se pueden borrar los registros sincronizados desde Neored. Registros %s' % data_recs.mapped('res_id'))

        </field>
        <field name="trigger">on_unlink</field>
    </record>

    <record id="protect_unlink_product_replenishment_cost_rule_item" model="base.automation">
        <field name="name">Protect syncked (unlink): product_replenishment_cost_rule_item</field>
        <field name="model_id" ref="product_replenishment_cost.model_product_replenishment_cost_rule_item"/>
        <field name="state">code</field>
        <field name="code">
if not env.context.get('odumbo_sync'):
  data_recs = env['ir.model.data'].sudo().search([('module', '=', '__odumbo__'), ('res_id', '=', records.ids), ('model', '=', record._name)])
  if data_recs:
    raise Warning('No se pueden borrar los registros sincronizados desde Neored. Registros %s' % data_recs.mapped('res_id'))

        </field>
        <field name="trigger">on_unlink</field>
    </record>

    <record id="protect_unlink_product_brand" model="base.automation">
        <field name="name">Protect syncked (unlink): product_brand</field>
        <field name="model_id" ref="product_brand.model_product_brand"/>
        <field name="state">code</field>
        <field name="code">
if not env.context.get('odumbo_sync'):
  data_recs = env['ir.model.data'].sudo().search([('module', '=', '__odumbo__'), ('res_id', '=', records.ids), ('model', '=', record._name)])
  if data_recs:
    raise Warning('No se pueden borrar los registros sincronizados desde Neored. Registros %s' % data_recs.mapped('res_id'))

        </field>
        <field name="trigger">on_unlink</field>
    </record>

    <record id="protect_unlink_product_attribute_template" model="base.automation">
        <field name="name">Protect syncked (unlink): product_attribute_template</field>
        <field name="model_id" ref="product_attribute_template.model_product_attribute_template"/>
        <field name="state">code</field>
        <field name="code">
if not env.context.get('odumbo_sync'):
  data_recs = env['ir.model.data'].sudo().search([('module', '=', '__odumbo__'), ('res_id', '=', records.ids), ('model', '=', record._name)])
  if data_recs:
    raise Warning('No se pueden borrar los registros sincronizados desde Neored. Registros %s' % data_recs.mapped('res_id'))

        </field>
        <field name="trigger">on_unlink</field>
    </record>

    <record id="protect_unlink_product_attribute" model="base.automation">
        <field name="name">Protect syncked (unlink): product_attribute</field>
        <field name="model_id" ref="product.model_product_attribute"/>
        <field name="state">code</field>
        <field name="code">
if not env.context.get('odumbo_sync'):
  data_recs = env['ir.model.data'].sudo().search([('module', '=', '__odumbo__'), ('res_id', '=', records.ids), ('model', '=', record._name)])
  if data_recs:
    raise Warning('No se pueden borrar los registros sincronizados desde Neored. Registros %s' % data_recs.mapped('res_id'))

        </field>
        <field name="trigger">on_unlink</field>
    </record>

    <record id="protect_unlink_product_template" model="base.automation">
        <field name="name">Protect syncked (unlink): product_template</field>
        <field name="model_id" ref="product.model_product_template"/>
        <field name="state">code</field>
        <field name="code">
if not env.context.get('odumbo_sync'):
  data_recs = env['ir.model.data'].sudo().search([('module', '=', '__odumbo__'), ('res_id', '=', records.ids), ('model', '=', record._name)])
  if data_recs:
    raise Warning('No se pueden borrar los registros sincronizados desde Neored. Registros %s' % data_recs.mapped('res_id'))

        </field>
        <field name="trigger">on_unlink</field>
    </record>

    <record id="protect_unlink_product_product" model="base.automation">
        <field name="name">Protect syncked (unlink): product_product</field>
        <field name="model_id" ref="product.model_product_product"/>
        <field name="state">code</field>
        <field name="code">
if not env.context.get('odumbo_sync'):
  data_recs = env['ir.model.data'].sudo().search([('module', '=', '__odumbo__'), ('res_id', '=', records.ids), ('model', '=', record._name)])
  if data_recs:
    raise Warning('No se pueden borrar los registros sincronizados desde Neored. Registros %s' % data_recs.mapped('res_id'))

        </field>
        <field name="trigger">on_unlink</field>
    </record>

    <record id="protect_unlink_product_uoms" model="base.automation">
        <field name="name">Protect syncked (unlink): product_uoms</field>
        <field name="model_id" ref="product_uoms.model_product_uoms"/>
        <field name="state">code</field>
        <field name="code">
if not env.context.get('odumbo_sync'):
  data_recs = env['ir.model.data'].sudo().search([('module', '=', '__odumbo__'), ('res_id', '=', records.ids), ('model', '=', record._name)])
  if data_recs:
    raise Warning('No se pueden borrar los registros sincronizados desde Neored. Registros %s' % data_recs.mapped('res_id'))

        </field>
        <field name="trigger">on_unlink</field>
    </record>

    <record id="protect_unlink_product_template_attribute_line" model="base.automation">
        <field name="name">Protect syncked (unlink): product_template_attribute_line</field>
        <field name="model_id" ref="product.model_product_template_attribute_line"/>
        <field name="state">code</field>
        <field name="code">
if not env.context.get('odumbo_sync'):
  data_recs = env['ir.model.data'].sudo().search([('module', '=', '__odumbo__'), ('res_id', '=', records.ids), ('model', '=', record._name)])
  if data_recs:
    raise Warning('No se pueden borrar los registros sincronizados desde Neored. Registros %s' % data_recs.mapped('res_id'))

        </field>
        <field name="trigger">on_unlink</field>
    </record>

    <record id="protect_unlink_product_attribute_value" model="base.automation">
        <field name="name">Protect syncked (unlink): product_attribute_value</field>
        <field name="model_id" ref="product.model_product_attribute_value"/>
        <field name="state">code</field>
        <field name="code">
if not env.context.get('odumbo_sync'):
  data_recs = env['ir.model.data'].sudo().search([('module', '=', '__odumbo__'), ('res_id', '=', records.ids), ('model', '=', record._name)])
  if data_recs:
    raise Warning('No se pueden borrar los registros sincronizados desde Neored. Registros %s' % data_recs.mapped('res_id'))

        </field>
        <field name="trigger">on_unlink</field>
    </record>

    <record id="protect_unlink_product_template_attribute_line" model="base.automation">
        <field name="name">Protect syncked (unlink): product_template_attribute_line</field>
        <field name="model_id" ref="product.model_product_template_attribute_line"/>
        <field name="state">code</field>
        <field name="code">
if not env.context.get('odumbo_sync'):
  data_recs = env['ir.model.data'].sudo().search([('module', '=', '__odumbo__'), ('res_id', '=', records.ids), ('model', '=', record._name)])
  if data_recs:
    raise Warning('No se pueden borrar los registros sincronizados desde Neored. Registros %s' % data_recs.mapped('res_id'))

        </field>
        <field name="trigger">on_unlink</field>
    </record>

    <record id="protect_unlink_product_template_attribute_value" model="base.automation">
        <field name="name">Protect syncked (unlink): product_template_attribute_value</field>
        <field name="model_id" ref="product.model_product_template_attribute_value"/>
        <field name="state">code</field>
        <field name="code">
if not env.context.get('odumbo_sync'):
  data_recs = env['ir.model.data'].sudo().search([('module', '=', '__odumbo__'), ('res_id', '=', records.ids), ('model', '=', record._name)])
  if data_recs:
    raise Warning('No se pueden borrar los registros sincronizados desde Neored. Registros %s' % data_recs.mapped('res_id'))

        </field>
        <field name="trigger">on_unlink</field>
    </record>

    <record id="protect_unlink_product_template_attribute_exclusion" model="base.automation">
        <field name="name">Protect syncked (unlink): product_template_attribute_exclusion</field>
        <field name="model_id" ref="product.model_product_template_attribute_exclusion"/>
        <field name="state">code</field>
        <field name="code">
if not env.context.get('odumbo_sync'):
  data_recs = env['ir.model.data'].sudo().search([('module', '=', '__odumbo__'), ('res_id', '=', records.ids), ('model', '=', record._name)])
  if data_recs:
    raise Warning('No se pueden borrar los registros sincronizados desde Neored. Registros %s' % data_recs.mapped('res_id'))

        </field>
        <field name="trigger">on_unlink</field>
    </record>

    <record id="protect_unlink_product_image" model="base.automation">
        <field name="name">Protect syncked (unlink): product_image</field>
        <field name="model_id" ref="website_sale.model_product_image"/>
        <field name="state">code</field>
        <field name="code">
if not env.context.get('odumbo_sync'):
  data_recs = env['ir.model.data'].sudo().search([('module', '=', '__odumbo__'), ('res_id', '=', records.ids), ('model', '=', record._name)])
  if data_recs:
    raise Warning('No se pueden borrar los registros sincronizados desde Neored. Registros %s' % data_recs.mapped('res_id'))

        </field>
        <field name="trigger">on_unlink</field>
    </record>

    <record id="protect_unlink_product_supplierinfo" model="base.automation">
        <field name="name">Protect syncked (unlink): product_supplierinfo</field>
        <field name="model_id" ref="product.model_product_supplierinfo"/>
        <field name="state">code</field>
        <field name="code">
if not env.context.get('odumbo_sync'):
  data_recs = env['ir.model.data'].sudo().search([('module', '=', '__odumbo__'), ('res_id', '=', records.ids), ('model', '=', record._name)])
  if data_recs:
    raise Warning('No se pueden borrar los registros sincronizados desde Neored. Registros %s' % data_recs.mapped('res_id'))

        </field>
        <field name="trigger">on_unlink</field>
    </record>

</odoo>

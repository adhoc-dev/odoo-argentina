<odoo>

    <record id="protect_res_partner" model="base.automation">
        <field name="name">Protect syncked (write): res_partner</field>
        <field name="model_id" ref="base.model_res_partner"/>
        <field name="state">code</field>
        <field name="code">
if record and not env.context.get('odumbo_sync') and env.context.get('old_values'):
  fields_to_check = ['name', 'street', 'street2', 'city', 'zip', 'vat', 'active', 'is_company', 'l10n_ar_afip_responsibility_type_id', 'l10n_latam_identification_type_id',]
  if set(fields_to_check) &amp; set(env.context['old_values'][record.id].keys()):
    data_recs = env['ir.model.data'].sudo().search([('module', '=', '__odumbo__'), ('res_id', 'in', records.ids), ('model', '=', record._name)])
    if data_recs:
      raise Warning('No puede modificar algunos datos de estos registros porque son sincronizados desde la base de Neored.\n*Registros: %s\n*Campos protegidos: %s' % (
        data_recs.mapped('res_id'), fields_to_check))

        </field>
        <field name="trigger">on_write</field>
    </record>

    <record id="protect_product_category" model="base.automation">
        <field name="name">Protect syncked (write): product_category</field>
        <field name="model_id" ref="product.model_product_category"/>
        <field name="state">code</field>
        <field name="code">
if record and not env.context.get('odumbo_sync') and env.context.get('old_values'):
  fields_to_check = ['name', 'parent_id',]
  if set(fields_to_check) &amp; set(env.context['old_values'][record.id].keys()):
    data_recs = env['ir.model.data'].sudo().search([('module', '=', '__odumbo__'), ('res_id', 'in', records.ids), ('model', '=', record._name)])
    if data_recs:
      raise Warning('No puede modificar algunos datos de estos registros porque son sincronizados desde la base de Neored.\n*Registros: %s\n*Campos protegidos: %s' % (
        data_recs.mapped('res_id'), fields_to_check))

        </field>
        <field name="trigger">on_write</field>
    </record>

    <record id="protect_product_public_category" model="base.automation">
        <field name="name">Protect syncked (write): product_public_category</field>
        <field name="model_id" ref="website_sale.model_product_public_category"/>
        <field name="state">code</field>
        <field name="code">
if record and not env.context.get('odumbo_sync') and env.context.get('old_values'):
  fields_to_check = ['name', 'parent_id', 'sequence', 'website_meta_title', 'website_meta_description', 'website_meta_keywords', 'website_meta_og_img',]
  if set(fields_to_check) &amp; set(env.context['old_values'][record.id].keys()):
    data_recs = env['ir.model.data'].sudo().search([('module', '=', '__odumbo__'), ('res_id', 'in', records.ids), ('model', '=', record._name)])
    if data_recs:
      raise Warning('No puede modificar algunos datos de estos registros porque son sincronizados desde la base de Neored.\n*Registros: %s\n*Campos protegidos: %s' % (
        data_recs.mapped('res_id'), fields_to_check))

        </field>
        <field name="trigger">on_write</field>
    </record>

    <record id="protect_uom_category" model="base.automation">
        <field name="name">Protect syncked (write): uom_category</field>
        <field name="model_id" ref="uom.model_uom_category"/>
        <field name="state">code</field>
        <field name="code">
if record and not env.context.get('odumbo_sync') and env.context.get('old_values'):
  fields_to_check = ['name', 'measure_type',]
  if set(fields_to_check) &amp; set(env.context['old_values'][record.id].keys()):
    data_recs = env['ir.model.data'].sudo().search([('module', '=', '__odumbo__'), ('res_id', 'in', records.ids), ('model', '=', record._name)])
    if data_recs:
      raise Warning('No puede modificar algunos datos de estos registros porque son sincronizados desde la base de Neored.\n*Registros: %s\n*Campos protegidos: %s' % (
        data_recs.mapped('res_id'), fields_to_check))

        </field>
        <field name="trigger">on_write</field>
    </record>

    <record id="protect_uom_uom" model="base.automation">
        <field name="name">Protect syncked (write): uom_uom</field>
        <field name="model_id" ref="uom.model_uom_uom"/>
        <field name="state">code</field>
        <field name="code">
if record and not env.context.get('odumbo_sync') and env.context.get('old_values'):
  fields_to_check = ['name', 'uom_type', 'factor_inv', 'rounding', 'l10n_ar_afip_code', 'arba_code', 'active', 'category_id', 'arba_code']
  if set(fields_to_check) &amp; set(env.context['old_values'][record.id].keys()):
    data_recs = env['ir.model.data'].sudo().search([('module', '=', '__odumbo__'), ('res_id', 'in', records.ids), ('model', '=', record._name)])
    if data_recs:
      raise Warning('No puede modificar algunos datos de estos registros porque son sincronizados desde la base de Neored.\n*Registros: %s\n*Campos protegidos: %s' % (
        data_recs.mapped('res_id'), fields_to_check))

        </field>
        <field name="trigger">on_write</field>
    </record>

    <record id="protect_product_replenishment_cost_rule" model="base.automation">
        <field name="name">Protect syncked (write): product_replenishment_cost_rule</field>
        <field name="model_id" ref="product_replenishment_cost.model_product_replenishment_cost_rule"/>
        <field name="state">code</field>
        <field name="code">
if record and not env.context.get('odumbo_sync') and env.context.get('old_values'):
  fields_to_check = ['name',]
  if set(fields_to_check) &amp; set(env.context['old_values'][record.id].keys()):
    data_recs = env['ir.model.data'].sudo().search([('module', '=', '__odumbo__'), ('res_id', 'in', records.ids), ('model', '=', record._name)])
    if data_recs:
      raise Warning('No puede modificar algunos datos de estos registros porque son sincronizados desde la base de Neored.\n*Registros: %s\n*Campos protegidos: %s' % (
        data_recs.mapped('res_id'), fields_to_check))

        </field>
        <field name="trigger">on_write</field>
    </record>

    <record id="protect_product_replenishment_cost_rule_item" model="base.automation">
        <field name="name">Protect syncked (write): product_replenishment_cost_rule_item</field>
        <field name="model_id" ref="product_replenishment_cost.model_product_replenishment_cost_rule_item"/>
        <field name="state">code</field>
        <field name="code">
if record and not env.context.get('odumbo_sync') and env.context.get('old_values'):
  fields_to_check = ['name', 'percentage_amount', 'fixed_amount', 'replenishment_cost_rule_id']
  if set(fields_to_check) &amp; set(env.context['old_values'][record.id].keys()):
    data_recs = env['ir.model.data'].sudo().search([('module', '=', '__odumbo__'), ('res_id', 'in', records.ids), ('model', '=', record._name)])
    if data_recs:
      raise Warning('No puede modificar algunos datos de estos registros porque son sincronizados desde la base de Neored.\n*Registros: %s\n*Campos protegidos: %s' % (
        data_recs.mapped('res_id'), fields_to_check))

        </field>
        <field name="trigger">on_write</field>
    </record>

    <record id="protect_product_brand" model="base.automation">
        <field name="name">Protect syncked (write): product_brand</field>
        <field name="model_id" ref="product_brand.model_product_brand"/>
        <field name="state">code</field>
        <field name="code">
if record and not env.context.get('odumbo_sync') and env.context.get('old_values'):
  fields_to_check = ['name', 'description', 'logo', 'partner_id']
  if set(fields_to_check) &amp; set(env.context['old_values'][record.id].keys()):
    data_recs = env['ir.model.data'].sudo().search([('module', '=', '__odumbo__'), ('res_id', 'in', records.ids), ('model', '=', record._name)])
    if data_recs:
      raise Warning('No puede modificar algunos datos de estos registros porque son sincronizados desde la base de Neored.\n*Registros: %s\n*Campos protegidos: %s' % (
        data_recs.mapped('res_id'), fields_to_check))

        </field>
        <field name="trigger">on_write</field>
    </record>

    <record id="protect_product_attribute_template" model="base.automation">
        <field name="name">Protect syncked (write): product_attribute_template</field>
        <field name="model_id" ref="product_attribute_template.model_product_attribute_template"/>
        <field name="state">code</field>
        <field name="code">
if record and not env.context.get('odumbo_sync') and env.context.get('old_values'):
  fields_to_check = ['name']
  if set(fields_to_check) &amp; set(env.context['old_values'][record.id].keys()):
    data_recs = env['ir.model.data'].sudo().search([('module', '=', '__odumbo__'), ('res_id', 'in', records.ids), ('model', '=', record._name)])
    if data_recs:
      raise Warning('No puede modificar algunos datos de estos registros porque son sincronizados desde la base de Neored.\n*Registros: %s\n*Campos protegidos: %s' % (
        data_recs.mapped('res_id'), fields_to_check))

        </field>
        <field name="trigger">on_write</field>
    </record>

    <record id="protect_product_attribute" model="base.automation">
        <field name="name">Protect syncked (write): product_attribute</field>
        <field name="model_id" ref="product.model_product_attribute"/>
        <field name="state">code</field>
        <field name="code">
if record and not env.context.get('odumbo_sync') and env.context.get('old_values'):
  fields_to_check = ['name', 'sequence', 'create_variant',]
  if set(fields_to_check) &amp; set(env.context['old_values'][record.id].keys()):
    data_recs = env['ir.model.data'].sudo().search([('module', '=', '__odumbo__'), ('res_id', 'in', records.ids), ('model', '=', record._name)])
    if data_recs:
      raise Warning('No puede modificar algunos datos de estos registros porque son sincronizados desde la base de Neored.\n*Registros: %s\n*Campos protegidos: %s' % (
        data_recs.mapped('res_id'), fields_to_check))

        </field>
        <field name="trigger">on_write</field>
    </record>

    <record id="protect_product_template" model="base.automation">
        <field name="name">Protect syncked (write): product_template</field>
        <field name="model_id" ref="product.model_product_template"/>
        <field name="state">code</field>
        <field name="code">
if record and not env.context.get('odumbo_sync') and env.context.get('old_values'):
  fields_to_check = [
    'name', 'warranty', 'type', 'description', 'description_sale', 'description_purchase', 'neored_image_url', 'arba_code',
    'manufacturer_pname', 'manufacturer_pref', 'manufacturer_purl',
    'inventory_availability',
    'available_threshold', 'custom_message',
    'replenishment_base_cost', 'replenishment_cost_type',
    'sale_delay', 'hs_code', 'description_pickingout', 'description_pickingin',
    'website_meta_title', 'website_meta_description', 'website_meta_keywords', 'website_meta_og_img',
    'purchase_ok', 'sale_ok',
    'categ_id', 'replenishment_cost_rule_id', 'product_brand_id', 'other_currency_id', 'replenishment_base_cost_currency_id', 'product_attribute_template_id',
    'manufacturer', 'product_abstract_id', 'uom_id',
    'uom_po_id', 'description_website', 'list_price_type', 'sale_margin',
    'public_categ_ids', 'optional_product_ids', 'alternative_product_ids', 'accessory_product_ids', 'taxes_id', 'supplier_taxes_id',
  ]
  if set(fields_to_check) &amp; set(env.context['old_values'][record.id].keys()):
    data_recs = env['ir.model.data'].sudo().search([('module', '=', '__odumbo__'), ('res_id', 'in', records.ids), ('model', '=', record._name)])
    if data_recs:
      raise Warning('No puede modificar algunos datos de estos registros porque son sincronizados desde la base de Neored.\n*Registros: %s\n*Campos protegidos: %s' % (
        data_recs.mapped('res_id'), fields_to_check))

        </field>
        <field name="trigger">on_write</field>
    </record>

    <record id="protect_product_product" model="base.automation">
        <field name="name">Protect syncked (write): product_product</field>
        <field name="model_id" ref="product.model_product_product"/>
        <field name="state">code</field>
        <field name="code">
if record and not env.context.get('odumbo_sync') and env.context.get('old_values'):
  fields_to_check = ['default_code', 'barcode', 'weight', 'volume', 'product_length', 'product_height', 'product_width', 'product_tmpl_id', 'dimensional_uom_id',]
  if set(fields_to_check) &amp; set(env.context['old_values'][record.id].keys()):
    data_recs = env['ir.model.data'].sudo().search([('module', '=', '__odumbo__'), ('res_id', 'in', records.ids), ('model', '=', record._name)])
    if data_recs:
      raise Warning('No puede modificar algunos datos de estos registros porque son sincronizados desde la base de Neored.\n*Registros: %s\n*Campos protegidos: %s' % (
        data_recs.mapped('res_id'), fields_to_check))

        </field>
        <field name="trigger">on_write</field>
    </record>

    <record id="protect_product_uoms" model="base.automation">
        <field name="name">Protect syncked (write): product_uoms</field>
        <field name="model_id" ref="product_uoms.model_product_uoms"/>
        <field name="state">code</field>
        <field name="code">
if record and not env.context.get('odumbo_sync') and env.context.get('old_values'):
  fields_to_check = ['sequence', 'sale_ok', 'purchase_ok', 'uom_id', 'product_tmpl_id']
  if set(fields_to_check) &amp; set(env.context['old_values'][record.id].keys()):
    data_recs = env['ir.model.data'].sudo().search([('module', '=', '__odumbo__'), ('res_id', 'in', records.ids), ('model', '=', record._name)])
    if data_recs:
      raise Warning('No puede modificar algunos datos de estos registros porque son sincronizados desde la base de Neored.\n*Registros: %s\n*Campos protegidos: %s' % (
        data_recs.mapped('res_id'), fields_to_check))

        </field>
        <field name="trigger">on_write</field>
    </record>

    <record id="protect_product_template_attribute_line" model="base.automation">
        <field name="name">Protect syncked (write): product_template_attribute_line</field>
        <field name="model_id" ref="product.model_product_template_attribute_line"/>
        <field name="state">code</field>
        <field name="code">
if record and not env.context.get('odumbo_sync') and env.context.get('old_values'):
  fields_to_check = ['product_tmpl_id', 'attribute_id', 'value_ids']
  if set(fields_to_check) &amp; set(env.context['old_values'][record.id].keys()):
    data_recs = env['ir.model.data'].sudo().search([('module', '=', '__odumbo__'), ('res_id', 'in', records.ids), ('model', '=', record._name)])
    if data_recs:
      raise Warning('No puede modificar algunos datos de estos registros porque son sincronizados desde la base de Neored.\n*Registros: %s\n*Campos protegidos: %s' % (
        data_recs.mapped('res_id'), fields_to_check))

        </field>
        <field name="trigger">on_write</field>
    </record>

    <record id="protect_product_attribute_value" model="base.automation">
        <field name="name">Protect syncked (write): product_attribute_value</field>
        <field name="model_id" ref="product.model_product_attribute_value"/>
        <field name="state">code</field>
        <field name="code">
if record and not env.context.get('odumbo_sync') and env.context.get('old_values'):
  fields_to_check = ['html_color', 'name', 'sequence', 'is_custom', 'attribute_id']
  if set(fields_to_check) &amp; set(env.context['old_values'][record.id].keys()):
    data_recs = env['ir.model.data'].sudo().search([('module', '=', '__odumbo__'), ('res_id', 'in', records.ids), ('model', '=', record._name)])
    if data_recs:
      raise Warning('No puede modificar algunos datos de estos registros porque son sincronizados desde la base de Neored.\n*Registros: %s\n*Campos protegidos: %s' % (
        data_recs.mapped('res_id'), fields_to_check))

        </field>
        <field name="trigger">on_write</field>
    </record>

    <record id="protect_product_template_attribute_line" model="base.automation">
        <field name="name">Protect syncked (write): product_template_attribute_line</field>
        <field name="model_id" ref="product.model_product_template_attribute_line"/>
        <field name="state">code</field>
        <field name="code">
if record and not env.context.get('odumbo_sync') and env.context.get('old_values'):
  fields_to_check = ['product_tmpl_id', 'attribute_id', 'value_ids']
  if set(fields_to_check) &amp; set(env.context['old_values'][record.id].keys()):
    data_recs = env['ir.model.data'].sudo().search([('module', '=', '__odumbo__'), ('res_id', 'in', records.ids), ('model', '=', record._name)])
    if data_recs:
      raise Warning('No puede modificar algunos datos de estos registros porque son sincronizados desde la base de Neored.\n*Registros: %s\n*Campos protegidos: %s' % (
        data_recs.mapped('res_id'), fields_to_check))

        </field>
        <field name="trigger">on_write</field>
    </record>

    <record id="protect_product_template_attribute_value" model="base.automation">
        <field name="name">Protect syncked (write): product_template_attribute_value</field>
        <field name="model_id" ref="product.model_product_template_attribute_value"/>
        <field name="state">code</field>
        <field name="code">
if record and not env.context.get('odumbo_sync') and env.context.get('old_values'):
  fields_to_check = ['price_extra', 'html_color', 'is_custom', 'product_attribute_value_id', 'product_tmpl_id']
  if set(fields_to_check) &amp; set(env.context['old_values'][record.id].keys()):
    data_recs = env['ir.model.data'].sudo().search([('module', '=', '__odumbo__'), ('res_id', 'in', records.ids), ('model', '=', record._name)])
    if data_recs:
      raise Warning('No puede modificar algunos datos de estos registros porque son sincronizados desde la base de Neored.\n*Registros: %s\n*Campos protegidos: %s' % (
        data_recs.mapped('res_id'), fields_to_check))

        </field>
        <field name="trigger">on_write</field>
    </record>

    <record id="protect_product_template_attribute_exclusion" model="base.automation">
        <field name="name">Protect syncked (write): product_template_attribute_exclusion</field>
        <field name="model_id" ref="product.model_product_template_attribute_exclusion"/>
        <field name="state">code</field>
        <field name="code">
if record and not env.context.get('odumbo_sync') and env.context.get('old_values'):
  fields_to_check = ['product_template_attribute_value_id', 'product_tmpl_id', 'value_ids']
  if set(fields_to_check) &amp; set(env.context['old_values'][record.id].keys()):
    data_recs = env['ir.model.data'].sudo().search([('module', '=', '__odumbo__'), ('res_id', 'in', records.ids), ('model', '=', record._name)])
    if data_recs:
      raise Warning('No puede modificar algunos datos de estos registros porque son sincronizados desde la base de Neored.\n*Registros: %s\n*Campos protegidos: %s' % (
        data_recs.mapped('res_id'), fields_to_check))

        </field>
        <field name="trigger">on_write</field>
    </record>

    <record id="protect_product_image" model="base.automation">
        <field name="name">Protect syncked (write): product_image</field>
        <field name="model_id" ref="website_sale.model_product_image"/>
        <field name="state">code</field>
        <field name="code">
if record and not env.context.get('odumbo_sync') and env.context.get('old_values'):
  fields_to_check = ['name', 'neored_image_url', 'product_tmpl_id']
  if set(fields_to_check) &amp; set(env.context['old_values'][record.id].keys()):
    data_recs = env['ir.model.data'].sudo().search([('module', '=', '__odumbo__'), ('res_id', 'in', records.ids), ('model', '=', record._name)])
    if data_recs:
      raise Warning('No puede modificar algunos datos de estos registros porque son sincronizados desde la base de Neored.\n*Registros: %s\n*Campos protegidos: %s' % (
        data_recs.mapped('res_id'), fields_to_check))

        </field>
        <field name="trigger">on_write</field>
    </record>

    <record id="protect_product_supplierinfo" model="base.automation">
        <field name="name">Protect syncked (write): product_supplierinfo</field>
        <field name="model_id" ref="product.model_product_supplierinfo"/>
        <field name="state">code</field>
        <field name="code">
if record and not env.context.get('odumbo_sync') and env.context.get('old_values'):
  fields_to_check = [
    'sequence', 'price', 'min_qty', 'delay', 'product_code', 'product_code_2', 'sequence', 'date_start', 'date_end',
    'name', 'product_id', 'product_uom', 'replenishment_cost_rule_id', 'currency_id',
  ]
  if set(fields_to_check) &amp; set(env.context['old_values'][record.id].keys()):
    data_recs = env['ir.model.data'].sudo().search([('module', '=', '__odumbo__'), ('res_id', 'in', records.ids), ('model', '=', record._name)])
    if data_recs:
      raise Warning('No puede modificar algunos datos de estos registros porque son sincronizados desde la base de Neored.\n*Registros: %s\n*Campos protegidos: %s' % (
        data_recs.mapped('res_id'), fields_to_check))

        </field>
        <field name="trigger">on_write</field>
    </record>

</odoo>

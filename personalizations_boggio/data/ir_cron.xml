<?xml version='1.0' encoding='UTF-8'?>
<odoo>
  <record id="personalizations_boggio.ir_cron_167" model="ir.cron">
    <field name="name">Envio automatico de movimientos contables del dia</field>
    <field name="model_id" ref="account.model_account_move"/>
    <field name="state">code</field>
    <field name="code">day_of_week= int(time.strftime("%w", time.gmtime(time.time( ))))
if day_of_week&gt;0 and day_of_week&lt;6 : 
  
  template = env['mail.template'].browse(143)
  template.send_mail(env['account.move'].search([], limit=1).id, force_send=True, raise_exception=False)






</field>
    <field name="interval_number">1</field>
    <field name="interval_type">days</field>
    <field name="numbercall">-1</field>
  </record>
  <record id="personalizations_boggio.ir_cron_172" model="ir.cron">
    <field name="name">Envio automatico de deuda</field>
    <field name="model_id" ref="account.model_account_move"/>
    <field name="state">code</field>
    <field name="code">day_of_week= int(time.strftime("%w", time.gmtime(time.time( ))))
if day_of_week&gt;0 and day_of_week&lt;6 :
#solo funciona los dias de semana
  users = env['res.partner'].search([('send_automatic_debt_email', '=', True)]).mapped('user_ids')
  template = env['mail.template'].browse(146)
  for user in users:
    template.send_mail(env['account.move'].search([['invoice_user_id.id','=',user]], limit=1).id, force_send=True, raise_exception=False)
</field>
    <field name="interval_number">1</field>
    <field name="interval_type">days</field>
    <field name="numbercall">-1</field>
  </record>
  <record id="personalizations_boggio.ir_cron_185" model="ir.cron">
    <field name="name">Envio automatico cc (1 por dia)</field>
    <field name="model_id" ref="account.model_res_partner"/>
    <field name="state">code</field>
    <field name="code">day_of_week= int(time.strftime("%w", time.gmtime(time.time( ))))
if day_of_week&gt;0 and day_of_week&lt;6 : 
#solo funciona los dias de semana

 hour_of_day= int(time.strftime("%-H", time.gmtime(time.time( ))))-3

 if hour_of_day&gt;=18 and hour_of_day&lt;=21 : 
   

  #datas = records
  datas = env['res.partner'].sudo().with_context(force_company=1, res_partner_search_mode='customer').search([['active','=',True]]).filtered(lambda r1: r1.credit_overdue&gt;5000 and r1.debt_balance&gt;5000 and r1.message_ids[0].date&lt; time.strftime("%Y-%m-%d", time.gmtime(time.time( )-30*24*60*60 )) )
  datas = datas[0:50]
  count=0;
  for partner_id in datas:
    
    recibos = env['account.payment.group'].search( [['partner_id', '=', partner_id.id],['state', '!=', 'draft'], ['payment_date', '&gt;', time.strftime("%Y-%m-%d", time.gmtime(time.time( )-30*24*60*60))]])
    if len(recibos)==0 :
      template = env['mail.template'].browse(145)
      template.send_mail(env['res.partner'].search([['id','=',partner_id.id]], limit=1).id, force_send=True, raise_exception=False)
      
      partner_id.message_post(body='* Envío automático de cuenta corriente. Deuda: %s, Deuda vencida: %s' % (partner_id.debt_balance, partner_id.credit_overdue))
      count=count+1
    
    if count &gt;= 6:
      break



#  raise Warning('hola')




</field>
    <field name="interval_number">1</field>
    <field name="interval_type">hours</field>
    <field name="numbercall">-1</field>
  </record>
  <record id="personalizations_boggio.ir_cron_187" model="ir.cron">
    <field name="name">Actualizar googleMerchant</field>
    <field name="model_id" ref="product.model_product_product"/>
    <field name="state">code</field>
    <field name="code">template = env['mail.template'].browse(148)
template.send_mail(env['product.product'].search([], limit=1).id, force_send=True, raise_exception=False)




</field>
    <field name="interval_number">1</field>
    <field name="interval_type">weeks</field>
    <field name="numbercall">-1</field>
  </record>
  <record id="personalizations_boggio.ir_cron_195" model="ir.cron">
    <field name="name">Envio automatico de aviso de estado de remitos</field>
    <field name="model_id" ref="stock.model_stock_picking"/>
    <field name="state">code</field>
    <field name="code">day_of_week= int(time.strftime("%w", time.gmtime(time.time( ))))
if day_of_week&gt;0 and day_of_week&lt;6 :
#solo funciona los dias de semana
  template = env['mail.template'].browse(150)
  template.send_mail(env['stock.picking'].search([['state_detail_id.id','=',12]], limit=1).id, force_send=True, raise_exception=False)



</field>
    <field name="interval_number">1</field>
    <field name="interval_type">days</field>
    <field name="numbercall">-1</field>
  </record>
  <record id="personalizations_boggio.ir_cron_201" model="ir.cron">
    <field name="name">Envio automatico Mis Pendientes</field>
    <field name="model_id" ref="base.model_res_users"/>
    <field name="state">code</field>
    <field name="code">day_of_week= int(time.strftime("%w", time.gmtime(time.time( ))))
if day_of_week&gt;0 and day_of_week&lt;6 :
#solo funciona los dias de semana
  template = env['mail.template'].browse(151)
  for user in env['res.users'].search([('send_automatic_pending_email', '=', True)]):
    template.send_mail(user.id, force_send=True, raise_exception=False)

</field>
    <field name="interval_number">1</field>
    <field name="interval_type">days</field>
    <field name="numbercall">-1</field>
  </record>
  <record id="personalizations_boggio.ir_cron_235" model="ir.cron">
    <field name="name">Actualizar costo contable a partir del costo de reabastecimiento - Transindar</field>
    <field name="model_id" ref="account.model_product_template"/>
    <field name="state">code</field>
    <field name="code"># los speparamos para que no de timeout
model.with_context(force_company=1).cron_update_cost_from_replenishment_cost()
</field>
    <field name="interval_number">1</field>
    <field name="interval_type">days</field>
    <field name="numbercall">-1</field>
    <field eval="True" name="doall"/>
  </record>
  <record id="personalizations_boggio.ir_cron_236" model="ir.cron">
    <field name="name">Actualizar costo contable a partir del costo de reabastecimiento - Energiu</field>
    <field name="model_id" ref="account.model_product_template"/>
    <field name="state">code</field>
    <field name="code"># los speparamos para que no de timeout
model.with_context(force_company=5).cron_update_cost_from_replenishment_cost()
</field>
    <field name="interval_number">1</field>
    <field name="interval_type">days</field>
    <field name="numbercall">-1</field>
    <field eval="True" name="doall"/>
  </record>
  <record id="personalizations_boggio.ir_cron_237" model="ir.cron">
    <field name="name">Actualizar costo contable a partir del costo de reabastecimiento - Auxiliar</field>
    <field name="model_id" ref="account.model_product_template"/>
    <field name="state">code</field>
    <field name="code"># los speparamos para que no de timeout
model.with_context(force_company=3).cron_update_cost_from_replenishment_cost()
</field>
    <field name="interval_number">1</field>
    <field name="interval_type">days</field>
    <field name="numbercall">-1</field>
    <field eval="True" name="doall"/>
  </record>
</odoo>

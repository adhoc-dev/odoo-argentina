<?xml version='1.0' encoding='UTF-8'?>
<odoo>
  <record id="personalizations_boggio.ir_act_server_1245" model="ir.actions.server">
    <field name="name">abrir stock por ubicacion en suggest</field>
    <field name="model_id" ref="purchase_suggest.model_purchase_suggest"/>
    <field name="state">code</field>
    <field name="crud_model_id" ref="purchase_suggest.model_purchase_suggest"/>
    <field name="code"><![CDATA[object = record
action = object.product_id.view_stock_detail()]]></field>
  </record>
  <record id="personalizations_boggio.ir_act_server_1247" model="ir.actions.server">
    <field name="name">Stock On Hand en suggest</field>
    <field name="model_id" ref="purchase_suggest.model_purchase_suggest"/>
    <field name="state">code</field>
    <field name="crud_model_id" ref="purchase_suggest.model_purchase_suggest"/>
    <field name="code"><![CDATA[object = record
action = record.product_id.action_open_quants()
]]></field>
  </record>
  <record id="personalizations_boggio.ir_act_server_1257" model="ir.actions.server">
    <field name="name">Stock On Hand en sale order line</field>
    <field name="model_id" ref="sale.model_sale_order_line"/>
    <field name="state">code</field>
    <field name="crud_model_id" ref="sale.model_sale_order_line"/>
    <field name="code"><![CDATA[object = record
# Available locals:
#  - time, datetime, dateutil: Python libraries
#  - env: Odoo Environement
#  - model: Model of the rhttp://erp.ingenieriaboggio.com.ar/web#notebook_page_358ecord on which the action is triggered
#  - object: Record on which the action is triggered if there is one, otherwise None
#  - workflow: Workflow engine
#  - log : log(message), function to log debug information in logging table
#  - Warning: Warning Exception to use with raise
# To return an action, assign: action = {...}

action = record.product_id.action_open_quants()
]]></field>
  </record>
  <record id="personalizations_boggio.ir_act_server_1300" model="ir.actions.server">
    <field name="name">Stock Traceability en sale order line</field>
    <field name="model_id" ref="sale.model_sale_order_line"/>
    <field name="state">code</field>
    <field name="crud_model_id" ref="sale.model_sale_order_line"/>
    <field name="code"><![CDATA[context = dict(env.context)
object = record
# Available locals:
#  - time, datetime, dateutil: Python libraries
#  - env: Odoo Environement
#  - model: Model of the rhttp://erp.ingenieriaboggio.com.ar/web#notebook_page_358ecord on which the action is triggered
#  - object: Record on which the action is triggered if there is one, otherwise None
#  - workflow: Workflow engine
#  - log : log(message), function to log debug information in logging table
#  - Warning: Warning Exception to use with raise
# To return an action, assign: action = {...}

action = env.ref('stock.act_product_stock_move_open')
action_read = action.read()[0]
context = {
    'search_default_future': 1,
    'search_default_picking_type': 1,
    'search_default_product_id': object.product_id.id,
    'default_product_id': object.product_id.id}
action_read['context'] = context
action = action_read]]></field>
  </record>
  <record id="personalizations_boggio.ir_act_server_1689" model="ir.actions.server">
    <field name="name">abrir stock por ubicacion en sale.order.line</field>
    <field name="model_id" ref="sale.model_sale_order_line"/>
    <field name="state">code</field>
    <field name="crud_model_id" ref="sale.model_sale_order_line"/>
    <field name="code"><![CDATA[object = record
action = object.product_id.view_stock_detail()]]></field>
  </record>
  <record id="personalizations_boggio.ir_act_server_1739" model="ir.actions.server">
    <field name="name">abrir stock por ubicacion en product.template lupa</field>
    <field name="model_id" ref="account.model_product_template"/>
    <field name="state">code</field>
    <field name="crud_model_id" ref="account.model_product_template"/>
    <field name="code"><![CDATA[object = record
action = object.view_stock_detail()]]></field>
  </record>
  <record id="personalizations_boggio.ir_act_server_1740" model="ir.actions.server">
    <field name="name">abrir stock por ubicacion en product.product lupa</field>
    <field name="model_id" ref="product.model_product_product"/>
    <field name="state">code</field>
    <field name="crud_model_id" ref="product.model_product_product"/>
    <field name="code"><![CDATA[object = record
action = object.view_stock_detail()]]></field>
  </record>
  <record id="personalizations_boggio.ir_act_server_1741" model="ir.actions.server">
    <field name="name">abrir stock por ubicacion en stock.picking lupa</field>
    <field name="model_id" ref="stock.model_stock_move_line"/>
    <field name="state">code</field>
    <field name="crud_model_id" ref="stock.model_stock_move_line"/>
    <field name="code"><![CDATA[active_id = env.context.get('active_id')
active_model = env.context.get('active_model')
if active_model != 'stock.move.line':
  raise Warning('Active model erroneo')

record = env[active_model].browse(active_id)

action = record.product_id.view_stock_detail()
]]></field>
  </record>
  <record id="personalizations_boggio.ir_act_server_1742" model="ir.actions.server">
    <field name="name">Stock Traceability en stock move line</field>
    <field name="model_id" ref="stock.model_stock_move_line"/>
    <field name="state">code</field>
    <field name="crud_model_id" ref="stock.model_stock_move_line"/>
    <field name="code"><![CDATA[# context = dict(env.context)
# object = record
active_id = env.context.get('active_id')
active_model = env.context.get('active_model')
if active_model != 'stock.move.line':
  raise Warning('Active model erroneo')

record = env[active_model].browse(active_id)

action = env.ref('stock.stock_move_line_action')
action_read = action.read()[0]
context = {
    'search_default_future': 1,
    'search_default_picking_type': 1,
    'search_default_product_id': record.product_id.id,
    'default_product_id': record.product_id.id}
action_read['context'] = context
action = action_read

]]></field>
  </record>
  <record id="personalizations_boggio.ir_act_server_1743" model="ir.actions.server">
    <field name="name">Stock On Hand en stock picking</field>
    <field name="model_id" ref="stock.model_stock_move_line"/>
    <field name="state">code</field>
    <field name="crud_model_id" ref="stock.model_stock_move_line"/>
    <field name="code"><![CDATA[
active_id = env.context.get('active_id')
active_model = env.context.get('active_model')
if active_model != 'stock.move.line':
  raise Warning('Active model erroneo')

record = env[active_model].browse(active_id)
action = record.product_id.action_open_quants()
]]></field>
  </record>
  <record id="personalizations_boggio.ir_act_server_1746" model="ir.actions.server">
    <field name="name">abrir stock por ubicacion en stock.move lupa</field>
    <field name="model_id" ref="stock.model_stock_move"/>
    <field name="state">code</field>
    <field name="crud_model_id" ref="stock.model_stock_move"/>
    <field name="code">
action = record.product_id.view_stock_detail()
</field>
  </record>
  <record id="personalizations_boggio.ir_act_server_1747" model="ir.actions.server">
    <field name="name">Stock On Hand en stock move</field>
    <field name="model_id" ref="stock.model_stock_move"/>
    <field name="state">code</field>
    <field name="crud_model_id" ref="stock.model_stock_move"/>
    <field name="code">
action = record.product_id.action_open_quants()
</field>
  </record>
  <record id="personalizations_boggio.ir_act_server_1748" model="ir.actions.server">
    <field name="name">Stock Traceability en stock move</field>
    <field name="model_id" ref="stock.model_stock_move"/>
    <field name="state">code</field>
    <field name="crud_model_id" ref="stock.model_stock_move"/>
    <field name="code"><![CDATA[context = dict(env.context)
object = record

action = env.ref('stock.act_product_stock_move_open')
action_read = action.read()[0]
context = {
    'search_default_future': 1,
    'search_default_picking_type': 1,
    'search_default_product_id': object.product_id.id,
    'default_product_id': object.product_id.id}
action_read['context'] = context
action = action_read]]></field>
  </record>
  <record id="personalizations_boggio.ir_act_server_1749" model="ir.actions.server">
    <field name="name">abrir stock por ubicacion en stock.inventory line lupa</field>
    <field name="model_id" ref="stock.model_stock_inventory_line"/>
    <field name="state">code</field>
    <field name="crud_model_id" ref="stock.model_stock_inventory_line"/>
    <field name="code"><![CDATA[object = record
action = object.product_id.view_stock_detail()]]></field>
  </record>
  <record id="personalizations_boggio.ir_act_server_1750" model="ir.actions.server">
    <field name="name">Stock On Hand en stock inventory line</field>
    <field name="model_id" ref="stock.model_stock_inventory_line"/>
    <field name="state">code</field>
    <field name="crud_model_id" ref="stock.model_stock_inventory_line"/>
    <field name="code">
action = record.product_id.action_open_quants()
</field>
  </record>
  <record id="personalizations_boggio.ir_act_server_1751" model="ir.actions.server">
    <field name="name">Stock Traceability en stock inventory line</field>
    <field name="model_id" ref="stock.model_stock_inventory_line"/>
    <field name="state">code</field>
    <field name="crud_model_id" ref="stock.model_stock_inventory_line"/>
    <field name="code"><![CDATA[context = dict(env.context)
object = record
action = env.ref('stock.act_product_stock_move_open')
action_read = action.read()[0]
context = {
    'search_default_future': 1,
    'search_default_picking_type': 1,
    'search_default_product_id': object.product_id.id,
    'default_product_id': object.product_id.id}
action_read['context'] = context
action = action_read]]></field>
  </record>
  <record id="personalizations_boggio.ir_act_server_1775" model="ir.actions.server">
    <field name="name">Stock On Hand en purchase order line</field>
    <field name="model_id" ref="product_replenishment_cost.model_purchase_order_line"/>
    <field name="state">code</field>
    <field name="crud_model_id" ref="product_replenishment_cost.model_purchase_order_line"/>
    <field name="code">
action = record.product_id.action_open_quants()
</field>
  </record>
  <record id="personalizations_boggio.ir_act_server_1776" model="ir.actions.server">
    <field name="name">Stock Traceability en purchase order line</field>
    <field name="model_id" ref="product_replenishment_cost.model_purchase_order_line"/>
    <field name="state">code</field>
    <field name="crud_model_id" ref="product_replenishment_cost.model_purchase_order_line"/>
    <field name="code"><![CDATA[context = dict(env.context)
object = record

action = env.ref('stock.act_product_stock_move_open')
action_read = action.read()[0]
context = {
    'search_default_future': 1,
    'search_default_picking_type': 1,
    'search_default_product_id': object.product_id.id,
    'default_product_id': object.product_id.id}
action_read['context'] = context
action = action_read]]></field>
  </record>
  <record id="personalizations_boggio.ir_act_server_1778" model="ir.actions.server">
    <field name="name">abrir stock por ubicacion en purchase.order.line</field>
    <field name="model_id" ref="product_replenishment_cost.model_purchase_order_line"/>
    <field name="state">code</field>
    <field name="crud_model_id" ref="product_replenishment_cost.model_purchase_order_line"/>
    <field name="code"><![CDATA[object = record
action = object.product_id.view_stock_detail()]]></field>
  </record>
  <record id="personalizations_boggio.ir_act_server_2328" model="ir.actions.server">
    <field name="name">Resetear ABC productos a D3 (ex C2)</field>
    <field name="model_id" ref="account.model_product_template"/>
    <field name="state">code</field>
    <field name="code"><![CDATA[products = env['product.template'].search(	['|', ['abc_sales_amount', 'not ilike', '3'], ['abc_sales_quantity', 'not ilike', 'D'],['active', '=', False]], limit=10000)
for product in products:  

  product.write({
    'abc_sales_amount' : '3',
    'abc_sales_quantity' : 'D',
    'website_sequence':0
    })




# Available variables:
#  - env: Odoo Environment on which the action is triggered
#  - model: Odoo Model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - Warning: Warning Exception to use with raise
# To return an action, assign: action = {...}



]]></field>
  </record>
  <record id="personalizations_boggio.ir_act_server_2338" model="ir.actions.server">
    <field name="name">Albaranes relacionados</field>
    <field name="model_id" ref="stock.model_stock_picking"/>
    <field name="state">code</field>
    <field name="code"><![CDATA[# Available variables:
#  - env: Odoo Environment on which the action is triggered
#  - model: Odoo Model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - Warning: Warning Exception to use with raise
# To return an action, assign: action = {...}


if record.group_id:
  action = env.ref('stock.do_view_pickings').read()[0]
  action['domain'] = [('group_id','=',record.group_id.id)]
  action['context'] = {'search_default_available':1}



]]></field>
  </record>
  <record id="personalizations_boggio.ir_act_server_2414" model="ir.actions.server">
    <field name="name">abrir stock por ubicacion en suggest</field>
    <field name="model_id" ref="stock.model_stock_warehouse_orderpoint"/>
    <field name="state">code</field>
    <field name="crud_model_id" ref="purchase_suggest.model_purchase_suggest"/>
    <field name="code"><![CDATA[object = record
action = object.product_id.view_stock_detail()]]></field>
  </record>
  <record id="personalizations_boggio.ir_act_server_2449" model="ir.actions.server">
    <field name="name">Estado de remitos entregados</field>
    <field name="model_id" ref="stock.model_stock_picking"/>
    <field name="state">code</field>
    <field name="code"><![CDATA[active_ids = env.context.get('active_ids')
active_model = env.context.get('active_model')
records_ib = env[active_model].browse(active_ids)

ismodel  = env.context.get('ismodel')
flete_id = env.context.get('state_detail_ib')
#raise Warning(flete_id)

if ismodel=='setstate':
  #raise Warning(flete_id)
  records_ib.write({  'x_state': flete_id })
  for remito in records_ib.x_voucher_ids:
     remito.picking_id.write({  'state_detail_id': flete_id })
  
else:  
  # modelo de stock.picking
  records_ib.write({  'state_detail_id': flete_id })
     

# Available variables:
#  - env: Odoo Environment on which the action is triggered
#  - model: Odoo Model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - Warning: Warning Exception to use with raise
# To return an action, assign: action = {...}



]]></field>
  </record>
  
</odoo>

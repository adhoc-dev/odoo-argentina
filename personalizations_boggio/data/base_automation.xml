<?xml version='1.0' encoding='UTF-8'?>
<odoo>
  <record id="personalizations_boggio.base_automation_12" model="base.automation">
    <field name="name">Envio de email por vacaciones</field>
    <field eval="False" name="sequence"/>
    <field name="model_id" ref="hr_holidays.model_hr_leave"/>
    <field name="state">email</field>
    <field name="crud_model_id" ref="hr_holidays.model_hr_leave"/>
    <field name="filter_domain">[['state', 'in', ['confirm', 'validate1']]]</field>
    <field name="trigger">on_create</field>
  </record>
  <record id="personalizations_boggio.base_automation_13" model="base.automation">
    <field name="name">Aviso de no conformidades por email </field>
    <field eval="False" name="sequence"/>
    <field name="model_id" ref="mgmtsystem_nonconformity.model_mgmtsystem_nonconformity"/>
    <field name="state">email</field>
    <field name="crud_model_id" ref="mgmtsystem_nonconformity.model_mgmtsystem_nonconformity"/>
    <field name="filter_domain">[]	</field>
    <field name="trigger">on_create</field>
  </record>
  <record id="personalizations_boggio.base_automation_15" model="base.automation">
    <field name="name">envio automatico de transformaciones </field>
    <field eval="False" name="sequence"/>
    <field name="model_id" ref="mrp.model_mrp_production"/>
    <field name="state">email</field>
    <field name="crud_model_id" ref="mrp.model_mrp_production"/>
    <field name="filter_domain">[['state', '=', 'done']]</field>
    <field name="filter_pre_domain">[['state', '!=', 'done']]</field>
    <field name="trigger">on_write</field>
  </record>
  <record id="personalizations_boggio.base_automation_18" model="base.automation">
    <field name="name">validar seguidores que sean del mismo partner</field>
    <field eval="False" name="sequence"/>
    <field name="model_id" ref="mail.model_mail_followers"/>
    <field name="state">code</field>
    <field name="crud_model_id" ref="mail.model_mail_followers"/>
    <field name="code">obj = record
user = env.user
object = record
rec = env[object.res_model].browse(obj.res_id)
# si el partner es un empleado (tiene usuario y no son portal), entonces dejamos seguir sin restricci√≥n
# usuarios portal o sin usuario (potenialmente con usuarios portal), exigimos que sean del mismo commercial partner
if env.user.id != 1 and object.res_model in ['account.move', 'sale.order'] and not object.partner_id.user_ids.filtered(lambda x: not x.share) and object.partner_id.commercial_partner_id != rec.partner_id.commercial_partner_id:
    raise Warning('No puede agregar como seguidor a un usuario no empleado (%s) que no este vinculado a la empresa del documento (%s)' % (object.partner_id.name, rec.partner_id.commercial_partner_id.name))</field>
    <field name="trigger">on_create</field>
  </record>
  <record id="personalizations_boggio.base_automation_19" model="base.automation">
    <field name="name">Presupuesto WEB </field>
    <field name="sequence">1</field>
    <field name="model_id" ref="delivery.model_sale_order"/>
    <field name="state">email</field>
    <field name="crud_model_id" ref="delivery.model_sale_order"/>
    <field name="filter_domain">[['create_uid', '=', 1], ['partner_id', '!=', 4], ['amount_total', '&gt;', 0]]</field>
    <field name="trg_date_id" ref="sale.field_sale_order__create_date"/>
    <field name="trg_date_range">5</field>
    <field name="trg_date_range_type">minutes</field>
    <field name="trigger">on_time</field>
  </record>
  <record id="personalizations_boggio.base_automation_26" model="base.automation">
    <field name="name">Pago antes de la entrega-accion server</field>
    <field name="sequence">1</field>
    <field name="model_id" ref="account.model_account_move"/>
    <field name="state">email</field>
    <field name="binding_model_id" ref="account.model_account_move"/>
    <field name="crud_model_id" ref="account.model_account_move"/>
    <field name="filter_domain">[['sale_type_id.invoice_policy', '=', 'prepaid'], ['state', '=', 'paid']]</field>
    <field name="filter_pre_domain">[['sale_type_id.invoice_policy', '=', 'prepaid'],['state', '=', 'open']]</field>
    <field name="on_change_fields">state</field>
    <field name="trigger">on_write</field>
  </record>
  <record id="personalizations_boggio.base_automation_27" model="base.automation">
    <field name="name">Crear CRM automaticamente</field>
    <field eval="False" name="sequence"/>
    <field name="model_id" ref="delivery.model_sale_order"/>
    <field name="state">code</field>
    <field name="binding_model_id" ref="delivery.model_sale_order"/>
    <field name="crud_model_id" ref="delivery.model_sale_order"/>
    <field name="code">object = record
if len(object.opportunity_id)==0:
    lead = env['crm.lead'].with_context(mail_auto_subscribe_no_notify=True).create({
    'partner_id': object.partner_id.id,
    'name': 'Seguimiento Auto. - '+ object.name +' '+ object.partner_id.name,
    'team_id': object.team_id.id,
    'create_uid': object.create_uid.id,
    'type': 'opportunity',
    'planned_revenue': object.amount_total*object.currency_id.inverse_rate,
    'probability': 40,
    'next_activity_id': 2,
    'date_action': time.strftime("%Y-%m-%d", time.gmtime(time.time( )+3*24*60*60)),
    'user_id': object.create_uid.id,
    'stage_id': 4,
    'tag_ids': [(6, 0, object.tag_ids.ids)]
    })

    object.write({'opportunity_id': lead.id})

#    'create_uid': object.create_uid.id,

#id	name	type	next_activity_id/id	partner_id/id	team_id/id	date_action	planned_revenue	probability
#next_activity_id,date_action	
# Available locals:
#  - time, datetime, dateutil: Python libraries
#  - env: Odoo Environement
#  - model: Model of the record on which the action is triggered
#  - object: Record on which the action is triggered if there is one, otherwise None
#  - workflow: Workflow engine
#  - log : log(message), function to log debug information in logging table
#  - Warning: Warning Exception to use with raise
# To return an action, assign: action = {...}</field>
    <field name="filter_domain">["&amp;","&amp;","&amp;","&amp;",["opportunity_id","=",False],["state","in",["draft","sent"]],["tag_ids","not ilike","sin seguimiento"],["date_order","&gt;=","2021-01-01 11:41:47"],"|",["tag_ids","ilike","si o si"],["x_monto_USD","&gt;=",2000]]</field>
    <field name="trg_date_id" ref="sale.field_sale_order__create_date"/>
    <field name="trg_date_range">1</field>
    <field name="trg_date_range_type">day</field>
    <field name="trigger">on_time</field>
  </record>
  <record id="personalizations_boggio.base_automation_30" model="base.automation">
    <field name="name">Recordatorio de iniciativas por vencer por email CRM</field>
    <field eval="False" name="sequence"/>
    <field name="model_id" ref="crm.model_crm_lead"/>
    <field name="state">email</field>
    <field name="binding_model_id" ref="crm.model_crm_lead"/>
    <field name="crud_model_id" ref="crm.model_crm_lead"/>
    <field name="filter_domain">[['stage_id', 'not ilike', 'perdi']]</field>
    <field name="trg_date_id" ref="crm.field_crm_lead__activity_date_deadline"/>
    <field name="trg_date_range">7</field>
    <field name="trg_date_range_type">day</field>
    <field name="trigger">on_time</field>
  </record>
  <record id="personalizations_boggio.base_automation_32" model="base.automation">
    <field name="name">CRM contacto web </field>
    <field eval="False" name="sequence"/>
    <field name="model_id" ref="crm.model_crm_lead"/>
    <field name="state">email</field>
    <field name="crud_model_id" ref="crm.model_crm_lead"/>
    <field name="filter_domain">[['medium_id', 'ilike', 'web']]</field>
    <field name="trigger">on_create</field>
  </record>
  <record id="personalizations_boggio.base_automation_38" model="base.automation">
    <field name="name">Envio automatico de remitos y pendientes (4 dias despues)</field>
    <field name="sequence">1</field>
    <field name="model_id" ref="stock.model_stock_picking"/>
    <field name="state">email</field>
    <field name="crud_model_id" ref="stock.model_stock_picking"/>
    <field name="filter_domain">["&amp;","&amp;","&amp;",["state","=","done"],["date_done","&gt;","2021-02-02 11:44:45"],"|",["partner_id.x_no_recibe_remito","=",False],["partner_id.parent_id.x_no_recibe_remito","=",False],["picking_type_id","in",[7,22,21,12,17]]]</field>
    <field name="trg_date_id" ref="stock.field_stock_picking__date_done"/>
    <field name="trg_date_range">4</field>
    <field name="trg_date_range_type">day</field>
    <field name="trigger">on_time</field>
  </record>
  <record id="personalizations_boggio.base_automation_40" model="base.automation">
    <field name="name">Seguimiento presupuesto automatico (para clientes)</field>
    <field eval="False" name="sequence"/>
    <field name="model_id" ref="delivery.model_sale_order"/>
    <field name="state">email</field>
    <field name="crud_model_id" ref="delivery.model_sale_order"/>
    <field name="filter_domain">["&amp;","&amp;","&amp;","&amp;","&amp;",["opportunity_id","=",False],["state","in",["draft","sent"]],["tag_ids","not ilike","sin seguimiento"],["date_order","&gt;=","2021-01-01 11:40:33"],["create_uid.id","in",[59,"52"]],"|",["tag_ids","ilike","si o si"],["x_monto_USD","&gt;=",500]]</field>
    <field name="trg_date_id" ref="sale.field_sale_order__create_date"/>
    <field name="trg_date_range">7</field>
    <field name="trg_date_range_type">day</field>
    <field name="trigger">on_time</field>
  </record>
  <record id="personalizations_boggio.base_automation_42" model="base.automation">
    <field name="name">Credit limit in partners</field>
    <field name="model_id" ref="account.model_res_partner"/>
    <field name="state">code</field>
    <field name="code"># Available variables:
#  - env: Odoo Environment on which the action is triggered
#  - model: Odoo Model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - Warning: Warning Exception to use with raise
# To return an action, assign: action = {...}



for rec in records:
  if not env.context.get('old_values'):
    continue
  continuar=0
  old_credit_limit = env.context['old_values'][rec.id].get('credit_limit')
  # si no tiene valor significa que este valor no se cambi√≥
  if not old_credit_limit:
    continuar=1
  else:
   new_credit_limit = rec.credit_limit
   if old_credit_limit != new_credit_limit:
      rec.message_post(body='* L√≠mite de cr√©dito: %s --&gt; %s' % (old_credit_limit, new_credit_limit))

  old_exceptua_actidad = env.context['old_values'][rec.id].get('x_exceptua_actidad')
  # si no tiene valor significa que este valor no se cambi√≥
  if not old_exceptua_actidad:
    continuar=1
  else:
   new_exceptua_actidad = rec.x_exceptua_actidad
   if old_exceptua_actidad != new_exceptua_actidad:
      rec.message_post(body='* Excepcion de actividad: %s --&gt; %s' % (old_exceptua_actidad, new_exceptua_actidad))

</field>
    <field name="trigger">on_write</field>
  </record>
  <record id="personalizations_boggio.base_automation_45" model="base.automation">
    <field name="name">Presupuesto WEB Mercado libre</field>
    <field name="sequence">1</field>
    <field name="model_id" ref="delivery.model_sale_order"/>
    <field name="state">email</field>
    <field name="crud_model_id" ref="delivery.model_sale_order"/>
    <field name="filter_domain">[["team_id.id","=",9]]</field>
    <field name="trg_date_id" ref="sale.field_sale_order__create_date"/>
    <field name="trg_date_range">5</field>
    <field name="trg_date_range_type">minutes</field>
    <field name="trigger">on_time</field>
  </record>
  <record id="personalizations_boggio.base_automation_46" model="base.automation">
    <field name="name">Asignar cta anal√≠tica a los moves</field>
    <field name="model_id" ref="stock.model_stock_move"/>
    <field name="state">code</field>
    <field name="code"># Available variables:
#  - env: Odoo Environment on which the action is triggered
#  - model: Odoo Model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - Warning: Warning Exception to use with raise
# To return an action, assign: action = {...}
inv_adj_action = env.ref('stock.action_inventory_form').id

for rec in records:
  if rec._context.get('params', False) and rec._context.get('params')['action'] == inv_adj_action:
    continue
  default_analytic_account = env['account.analytic.default'].account_get(rec.product_id.id, partner_id=rec.picking_id and rec.picking_id.partner_id.id or False , user_id=env.user.id, company_id=rec.picking_id.company_id.id or rec._context.get('force_company', False))
  if default_analytic_account:
    rec.write({'analytic_account_id':default_analytic_account.analytic_id.id})</field>
    <field name="trigger">on_create</field>
  </record>
  <record id="personalizations_boggio.base_automation_47" model="base.automation">
    <field name="name">Sincronizar productos algolia</field>
    <field name="model_id" ref="product.model_product_product"/>
    <field name="state">code</field>
    <field name="code"># Available variables:
#  - env: Odoo Environment on which the action is triggered
#  - model: Odoo Model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - Warning: Warning Exception to use with raise
# To return an action, assign: action = {...}

env['ir.model'].search([('model', '=', 'product.product')]).sudo().algolia_index_sync(records)

</field>
    <field name="trigger">on_create</field>
  </record>
  <record id="personalizations_boggio.base_automation_48" model="base.automation">
    <field name="name">Sincronizar modificaciones product.product a algolia</field>
    <field name="model_id" ref="product.model_product_product"/>
    <field name="state">code</field>
    <field name="code"># Available variables:
#  - env: Odoo Environment on which the action is triggered
#  - model: Odoo Model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - Warning: Warning Exception to use with raise
# To return an action, assign: action = {...}

# website_sequence este por ahora no lo agrego porque si se cambia secuencia de uno debe cambiar de todos y adem√°s todavia no se est√° usando
fields_to_check = ['website_url', 'product_tmpl_id', 'name', 'website_published', 'default_code', 'brand_id', 'internal_code', 'supplier_code', 'public_categ_ids']
old_values = env.context.get('old_values') or {}
if set(fields_to_check) &amp; set(old_values.get(record.id, {})):
  env['ir.model'].search([('model', '=', 'product.product')]).sudo().algolia_index_sync(records)

</field>
    <field name="trigger">on_write</field>
  </record>
  <record id="personalizations_boggio.base_automation_49" model="base.automation">
    <field name="name">Sincronizar modificaciones product.template a algolia</field>
    <field name="model_id" ref="account.model_product_template"/>
    <field name="state">code</field>
    <field name="code"># Available variables:
#  - env: Odoo Environment on which the action is triggered
#  - model: Odoo Model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - Warning: Warning Exception to use with raise
# To return an action, assign: action = {...}

# website_sequence este por ahora no lo agrego porque si se cambia secuencia de uno debe cambiar de todos y adem√°s todavia no se est√° usando
fields_to_check = ['website_url', 'product_tmpl_id', 'name', 'website_published', 'default_code', 'brand_id', 'internal_code', 'supplier_code', 'public_categ_ids']
old_values = env.context.get('old_values') or {}
if set(fields_to_check) &amp; set(old_values.get(record.id, {})):
  env['ir.model'].search([('model', '=', 'product.product')]).sudo().algolia_index_sync(records.mapped('product_variant_ids'))

</field>
    <field name="trigger">on_write</field>
  </record>
  <record id="personalizations_boggio.base_automation_50" model="base.automation">
    <field name="name">Envio automatico de correo CRM energiu</field>
    <field name="model_id" ref="crm.model_crm_lead"/>
    <field name="state">email</field>
    <field name="filter_domain">[["team_id.id","=",8]]</field>
    <field name="trigger">on_create</field>
  </record>
</odoo>

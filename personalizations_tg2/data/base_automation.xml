<?xml version='1.0' encoding='UTF-8'?>
<odoo>
  <record id="personalizations_tg2.base_automation_1_80b6fdc9" model="base.automation">
    <field name="name">Completar precio cuenta analtica</field>
    <field name="sequence">5</field>
    <field name="model_id" ref="account.model_account_analytic_line"/>
    <field name="state">code</field>
    <field name="binding_type">action</field>
    <field name="code"># Available variables:
#  - env: Odoo Environment on which the action is triggered
#  - model: Odoo Model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - Warning: Warning Exception to use with raise
# To return an action, assign: action = {...}

if record.product_id and record.unit_amount:
  record.update({'amount': record.product_id.standard_price * record.unit_amount})
else:
  record.update({'amount': 0.0})


</field>
    <field name="active" eval="True"/>
    <field name="on_change_fields">unit_amount,product_id</field>
    <field name="trg_date_range_type">day</field>
    <field name="trigger">on_change</field>
  </record>
  <record id="personalizations_tg2.base_automation_2_f1b8d12d" model="base.automation">
    <field name="name">Validar que exista un producto al crear las entradas analiticas</field>
    <field name="sequence">5</field>
    <field name="model_id" ref="account.model_account_analytic_line"/>
    <field name="state">code</field>
    <field name="binding_type">action</field>
    <field name="code"># Available variables:
#  - env: Odoo Environment on which the action is triggered
#  - model: Odoo Model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - Warning: Warning Exception to use with raise
# To return an action, assign: action = {...}

for rec in records:
  if rec.move_id and rec.move_id.journal_id.type != 'general' and not rec.employee_id and not rec.product_id:
    msg = "Debe elegir un producto para generar la entrada analitica"
  elif not rec.move_id and not rec.employee_id and not rec.product_id:
    msg = "Debe elegir un producto para generar la entrada analitica"
  else:
    continue
  raise Warning(msg)
  


</field>
    <field name="active" eval="True"/>
    <field name="trigger">on_write</field>
  </record>
  <record id="personalizations_tg2.base_automation_3_57386e33" model="base.automation">
    <field name="name">completar con el producto predefinido al crear una linea analitica por empleado</field>
    <field name="sequence">5</field>
    <field name="model_id" ref="account.model_account_analytic_line"/>
    <field name="state">code</field>
    <field name="binding_type">action</field>
    <field name="code"># Available variables:
#  - env: Odoo Environment on which the action is triggered
#  - model: Odoo Model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - Warning: Warning Exception to use with raise
# To return an action, assign: action = {...}

# if not env['ir.config_parameter'].sudo().get_param('product_analytic'):
#   raise Warning("Debe configurar el producto para los empleados")

for rec in records:
  if rec.move_id and rec.move_id.journal_id.type != 'general' and not rec.employee_id and not rec.product_id:
    msg = "Debe elegir un producto para generar la entrada analitica"
  elif not rec.move_id and not rec.employee_id and not rec.product_id:
    msg = "Debe elegir un producto para generar la entrada analitica"
  else:
    continue
  raise Warning(msg)

for rec in records.filtered(lambda x: not x.product_id and x.employee_id):
    rec.write({'product_id': rec.employee_id.x_product_id.id, 'amount': -rec.employee_id.x_product_id.standard_price * rec.unit_amount})
    # rec.write({'product_id': env['product.product'].browse(env['ir.config_parameter'].sudo().get_param('product_analytic')).id})
  


</field>
    <field name="active" eval="True"/>
    <field name="trigger">on_create</field>
  </record>
  <record id="personalizations_tg2.base_automation_4_ebd855dc" model="base.automation">
    <field name="name">Dominio de cuenta anal√≠tica en parte de horas</field>
    <field name="sequence">5</field>
    <field name="model_id" ref="account.model_account_analytic_line"/>
    <field name="state">code</field>
    <field name="binding_type">action</field>
    <field name="code"># Available variables:
#  - env: Odoo Environment on which the action is triggered
#  - model: Odoo Model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - Warning: Warning Exception to use with raise
# To return an action, assign: action = {...}

action = {'domain': {'account_id': [('id', 'child_of', record.project_id.analytic_account_id.id)]}}
</field>
    <field name="active" eval="True"/>
    <field name="on_change_fields">project_id</field>
    <field name="trg_date_range_type">day</field>
    <field name="trigger">on_change</field>
  </record>
  <record id="personalizations_tg2.base_automation_5_c0cddecb" model="base.automation">
    <field name="name">completar etiquetas en lineas</field>
    <field name="sequence">5</field>
    <field name="model_id" ref="purchase.model_purchase_order"/>
    <field name="state">code</field>
    <field name="binding_type">action</field>
    <field name="code"># Available variables:
#  - env: Odoo Environment on which the action is triggered
#  - model: Odoo Model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - Warning: Warning Exception to use with raise
# To return an action, assign: action = {...}
if record.x_analytic_tag_ids:
  record.order_line.update({'analytic_tag_ids': record.x_analytic_tag_ids})</field>
    <field name="active" eval="True"/>
    <field name="on_change_fields">x_analytic_tag_ids</field>
    <field name="trg_date_range_type">day</field>
    <field name="trigger">on_change</field>
  </record>
  <record id="personalizations_tg2.base_automation_6_ea6cc327" model="base.automation">
    <field name="name">completar cuentas en lineas</field>
    <field name="sequence">5</field>
    <field name="model_id" ref="purchase.model_purchase_order"/>
    <field name="state">code</field>
    <field name="binding_type">action</field>
    <field name="code"># Available variables:
#  - env: Odoo Environment on which the action is triggered
#  - model: Odoo Model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - Warning: Warning Exception to use with raise
# To return an action, assign: action = {...}
if record.x_account_analytic_id:
  record.order_line.update({'account_analytic_id': record.x_account_analytic_id.id})
</field>
    <field name="active" eval="True"/>
    <field name="on_change_fields">x_account_analytic_id</field>
    <field name="trg_date_range_type">day</field>
    <field name="trigger">on_change</field>
  </record>
  <record id="personalizations_tg2.base_automation_7_27cef327" model="base.automation">
    <field name="name">completar etiquetas en moves</field>
    <field name="sequence">5</field>
    <field name="model_id" ref="delivery.model_stock_picking"/>
    <field name="state">code</field>
    <field name="binding_type">action</field>
    <field name="code"># Available variables:
#  - env: Odoo Environment on which the action is triggered
#  - model: Odoo Model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - Warning: Warning Exception to use with raise
# To return an action, assign: action = {...}
if record.x_analytic_tag_ids:
  record.move_lines.update({'analytic_tag_ids': record.x_analytic_tag_ids})


</field>
    <field name="active" eval="True"/>
    <field name="on_change_fields">x_analytic_tag_ids</field>
    <field name="trg_date_range_type">day</field>
    <field name="trigger">on_change</field>
  </record>
  <record id="personalizations_tg2.base_automation_8_da014efd" model="base.automation">
    <field name="name">completar cuentas en moves</field>
    <field name="sequence">5</field>
    <field name="model_id" ref="delivery.model_stock_picking"/>
    <field name="state">code</field>
    <field name="binding_type">action</field>
    <field name="code"># Available variables:
#  - env: Odoo Environment on which the action is triggered
#  - model: Odoo Model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - Warning: Warning Exception to use with raise
# To return an action, assign: action = {...}
if record.x_account_analytic_id:
  record.move_lines.update({'analytic_account_id': record.x_account_analytic_id.id})


</field>
    <field name="active" eval="True"/>
    <field name="on_change_fields">x_account_analytic_id</field>
    <field name="trg_date_range_type">day</field>
    <field name="trigger">on_change</field>
  </record>
</odoo>
